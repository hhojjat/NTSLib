/*
Licensed under the MIT License.
Copyright (C) 2012 EPFL (Switzerland) , Verimag (France), IMDEA Software (Spain).

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
nts pgm;

// Global Decls
cpost_client_read_without_err, main_without_err, PC2, cmain, PC25, cclient_read_header: int;
CNT_cpost_server_send_header, CNT_cpost_client_read, CNT_cpost_new_client: int;
MI_b0__0: int;
MF_b0__0: int;

MI_b0__1: int;
MF_b0__1: int;

main {
b0, res: int;
nxt_b0: int;
initial si;
final sf;
error se;

si -> s0 { b0' >= 0 && b0' <= 1 &&  cpost_client_read_without_err' = 0 && main_without_err' = 0 && PC2' = 0 && cmain' = 0 && PC25' = 0 && cclient_read_header' = 0 && CNT_cpost_server_send_header' = 0 && CNT_cpost_client_read' = 0 && CNT_cpost_new_client' = 0 && havoc(b0, cpost_client_read_without_err, main_without_err, PC2, cmain, PC25, cclient_read_header, CNT_cpost_server_send_header, CNT_cpost_client_read, CNT_cpost_new_client)}
s0 -> s1 { main_without_err' = main_without_err + 1 &&
       MI_b0__1' = b0 && MF_b0__1' = nxt_b0' &&
	 nxt_b0' >= 0 && nxt_b0' <= 1 && 
       havoc (main_without_err, MI_b0__1, MF_b0__1, nxt_b0) }
s1 -> s2_1 { res' = traverse_main_without_err_1() && havoc(res) }
s2_1 -> eventloop { res = 1 && res' = 0 && b0' = nxt_b0 &&  havoc(res, b0) }

eventloop -> sf { CNT_cpost_server_send_header = 0 && CNT_cpost_client_read = 0 && CNT_cpost_new_client = 0 && havoc() }
eventloop -> s3 { CNT_cpost_server_send_header >= 1 && CNT_cpost_server_send_header' = CNT_cpost_server_send_header - 1 && havoc(CNT_cpost_server_send_header) }

s3 -> s5 { 
           MI_b0__1' = b0 && MF_b0__1' = nxt_b0' &&
	 nxt_b0' >= 0 && nxt_b0' <= 1 && 
           havoc( MI_b0__1, MF_b0__1, nxt_b0) }

s5 -> s2_5 { res' = traverse_cpost_server_send_header_without_err_1() && havoc(res) }
s2_5 -> eventloop { b0' = nxt_b0 &&  havoc(b0) }

eventloop -> s6 { CNT_cpost_client_read >= 1 && CNT_cpost_client_read' = CNT_cpost_client_read - 1 && havoc(CNT_cpost_client_read) }

s6 -> s7 { 
           MI_b0__1' = b0 && MF_b0__1' = nxt_b0' &&
	 nxt_b0' >= 0 && nxt_b0' <= 1 && 
           havoc( MI_b0__1, MF_b0__1, nxt_b0) }

s7 -> se_7 { res' = traverse_cpost_client_read_with_err_1() && havoc(res) }
se_7 -> se { res = 1 && res' = 0 && b0' = nxt_b0 &&  havoc(res, b0) }

s6 -> s8 { cpost_client_read_without_err' = cpost_client_read_without_err + 1 &&
           MI_b0__1' = b0 && MF_b0__1' = nxt_b0' &&
	 nxt_b0' >= 0 && nxt_b0' <= 1 && 
           havoc(cpost_client_read_without_err, MI_b0__1, MF_b0__1, nxt_b0) }

s8 -> s2_8 { res' = traverse_cpost_client_read_without_err_1() && havoc(res) }
s2_8 -> eventloop { b0' = nxt_b0 &&  havoc(b0) }

eventloop -> s9 { CNT_cpost_new_client >= 1 && CNT_cpost_new_client' = CNT_cpost_new_client - 1 && havoc(CNT_cpost_new_client) }

s9 -> s11 { 
           MI_b0__1' = b0 && MF_b0__1' = nxt_b0' &&
	 nxt_b0' >= 0 && nxt_b0' <= 1 && 
           havoc( MI_b0__1, MF_b0__1, nxt_b0) }

s11 -> s2_11 { res' = traverse_cpost_new_client_without_err_1() && havoc(res) }
s2_11 -> eventloop { b0' = nxt_b0 &&  havoc(b0) }

}

//----------------------------------
// Grammar of main_without_err
// <PC2> -> 'e'
// <PC34> -> 'assert (T)' <PC35>
// <PC35> -> 'e'
// <cmain> -> 'cpost_new_client' <PC34>
// <main_without_err> -> <cmain> <PC2>
//----------------------------------
traverse_main_without_err_0 {
res: int;
out done: int;
initial si;
final sf;

si -> p0 { PC2 >= 1 && havoc() }
si -> p3 { cmain >= 1 && havoc() }
si -> p4 { main_without_err >= 1 && havoc() }


// <PC2> -> 'e'
p0 -> sf { PC2' = PC2 - 1 && done' = 1 &&
       	MI_b0__0 = MF_b0__0 && 
       	havoc(PC2, done) }

// <PC34> -> 'assert (T)' <PC35>
p1 -> p2 { 1 = 1 &&  
        havoc() }

// <PC35> -> 'e'
p2 -> sf {  done' = 1 &&
       	MI_b0__0 = MF_b0__0 && 
       	havoc(done) }

// <cmain> -> 'cpost_new_client' <PC34>
p3 -> p1 { CNT_cpost_new_client' = CNT_cpost_new_client + 1  && cmain' = cmain - 1 && 
        havoc(CNT_cpost_new_client, cmain) }

// <main_without_err> -> <cmain> <PC2> 
p4 -> p4_0 {0 >= 1 &&
        MF_b0__0' = MF_b0__0 && MF_b0__0' = MI_b0__0' &&
	 MI_b0__0' >= 0 && MI_b0__0' <= 1 && 
        main_without_err' = main_without_err - 1 && PC2' = PC2 + 1 &&
        havoc(MF_b0__0, MF_b0__0, MI_b0__0,  main_without_err, PC2) }

p4_0 -> si4_0 { res' = 1 && havoc(res) }

si4_0 -> p3 { res = 1 && res' = 0 && cmain' = cmain + 1 && 
        havoc(res, cmain) }

p4 -> p4_1 {0 >= 1 &&
        MI_b0__0' = MI_b0__0 && MI_b0__0' = MF_b0__0' &&
	 MF_b0__0' >= 0 && MF_b0__0' <= 1 && 
        main_without_err' = main_without_err - 1 && cmain' = cmain + 1 &&
        havoc(MI_b0__0, MI_b0__0, MF_b0__0,  main_without_err, cmain) }

p4_1 -> si4_1 { res' = 1 &&  havoc(res) }

si4_1 -> p0 { res = 1 && res' = 0 && PC2' = PC2 + 1 &&
        havoc(res, PC2) }


}

//----------------------------------
// Grammar of main_without_err
// <PC2> -> 'e'
// <PC34> -> 'assert (T)' <PC35>
// <PC35> -> 'e'
// <cmain> -> 'cpost_new_client' <PC34>
// <main_without_err> -> <cmain> <PC2>
//----------------------------------
traverse_main_without_err_1 {
res: int;
out done: int;
initial si;
final sf;

si -> p0 { PC2 >= 1 && havoc() }
si -> p3 { cmain >= 1 && havoc() }
si -> p4 { main_without_err >= 1 && havoc() }


// <PC2> -> 'e'
p0 -> sf { PC2' = PC2 - 1 && done' = 1 &&
       	MI_b0__1 = MF_b0__1 && 
       	havoc(PC2, done) }

// <PC34> -> 'assert (T)' <PC35>
p1 -> p2 { 1 = 1 &&  
        havoc() }

// <PC35> -> 'e'
p2 -> sf {  done' = 1 &&
       	MI_b0__1 = MF_b0__1 && 
       	havoc(done) }

// <cmain> -> 'cpost_new_client' <PC34>
p3 -> p1 { CNT_cpost_new_client' = CNT_cpost_new_client + 1  && cmain' = cmain - 1 && 
        havoc(CNT_cpost_new_client, cmain) }

// <main_without_err> -> <cmain> <PC2> 
p4 -> p4_0 {1 >= 1 &&
        MF_b0__0' = MF_b0__1 && MF_b0__1' = MI_b0__0' &&
	 MI_b0__0' >= 0 && MI_b0__0' <= 1 && 
        main_without_err' = main_without_err - 1 && PC2' = PC2 + 1 &&
        havoc(MF_b0__0, MF_b0__1, MI_b0__0,  main_without_err, PC2) }

p4_0 -> si4_0 { res' = traverse_main_without_err_0() && havoc(res) }

si4_0 -> p3 { res = 1 && res' = 0 && cmain' = cmain + 1 && 
        havoc(res, cmain) }

p4 -> p4_1 {1 >= 1 &&
        MI_b0__0' = MI_b0__1 && MI_b0__1' = MF_b0__0' &&
	 MF_b0__0' >= 0 && MF_b0__0' <= 1 && 
        main_without_err' = main_without_err - 1 && cmain' = cmain + 1 &&
        havoc(MI_b0__0, MI_b0__1, MF_b0__0,  main_without_err, cmain) }

p4_1 -> si4_1 { res' = traverse_main_without_err_0() &&  havoc(res) }

si4_1 -> p0 { res = 1 && res' = 0 && PC2' = PC2 + 1 &&
        havoc(res, PC2) }


}

//----------------------------------
// Grammar of cpost_server_send_header_without_err
// <PC12> -> 'e'
// <cpost_server_send_header_without_err> -> 'b0 := F' <PC12>
//----------------------------------
traverse_cpost_server_send_header_without_err_0 {
res: int;
out done: int;
initial p1;
final sf;



// <PC12> -> 'e'
p0 -> sf {  done' = 1 &&
       	MI_b0__0 = MF_b0__0 && 
       	havoc(done) }

// <cpost_server_send_header_without_err> -> 'b0 := F' <PC12>
p1 -> p0 { MI_b0__0' = 0 &&  
        havoc(MI_b0__0) }


}

//----------------------------------
// Grammar of cpost_server_send_header_without_err
// <PC12> -> 'e'
// <cpost_server_send_header_without_err> -> 'b0 := F' <PC12>
//----------------------------------
traverse_cpost_server_send_header_without_err_1 {
res: int;
out done: int;
initial p1;
final sf;



// <PC12> -> 'e'
p0 -> sf {  done' = 1 &&
       	MI_b0__1 = MF_b0__1 && 
       	havoc(done) }

// <cpost_server_send_header_without_err> -> 'b0 := F' <PC12>
p1 -> p0 { MI_b0__1' = 0 &&  
        havoc(MI_b0__1) }


}

//----------------------------------
// Grammar of cpost_client_read_with_err
// <END_l2_cclient_read_header_prime_END> -> 'e'
// <INIT_PC15_prime_END> -> 'b0 := T' <INIT_l1_cclient_read_header_prime_END>
// <INIT_PC17_prime_END> -> 'assert (F)'
// <INIT_PC17_prime_END> -> 'assert (F)' <END_l2_cclient_read_header_prime_END>
// <INIT_PC24_prime_END> -> 'assert(!*)' <INIT_PC15_prime_END>
// <INIT_PC24_prime_END> -> 'assert(*)' <INIT_l1_cclient_read_header_prime_END>
// <INIT_l1_cclient_read_header_prime_END> -> 'assert(b0)' <INIT_PC17_prime_END>
// <cpost_client_read_with_err> -> 'assert(!b0)' <INIT_PC24_prime_END>
//----------------------------------
traverse_cpost_client_read_with_err_0 {
res: int;
out done: int;
initial p5;
final sf;



// <END_l2_cclient_read_header_prime_END> -> 'e'
p0 -> sf {  done' = 1 &&
       	MI_b0__0 = MF_b0__0 && 
       	havoc(done) }

// <INIT_PC15_prime_END> -> 'b0 := T' <INIT_l1_cclient_read_header_prime_END>
p1 -> p4 { MI_b0__0' = 1 &&  
        havoc(MI_b0__0) }

// <INIT_PC17_prime_END> -> 'assert (F)'
p2 -> sf { 1 = 1 &&  done' = 1 && MI_b0__0 = MF_b0__0 && 
        havoc(done) }

// <INIT_PC17_prime_END> -> 'assert (F)' <END_l2_cclient_read_header_prime_END>
p2 -> p0 { 1 = 1 &&  
        havoc() }

// <INIT_PC24_prime_END> -> 'assert(!*)' <INIT_PC15_prime_END>
p3 -> p1 { 1 = 1 &&  
        havoc() }

// <INIT_PC24_prime_END> -> 'assert(*)' <INIT_l1_cclient_read_header_prime_END>
p3 -> p4 { 1 = 1 &&  
        havoc() }

// <INIT_l1_cclient_read_header_prime_END> -> 'assert(b0)' <INIT_PC17_prime_END>
p4 -> p2 { MI_b0__0 = 1 &&  
        havoc() }

// <cpost_client_read_with_err> -> 'assert(!b0)' <INIT_PC24_prime_END>
p5 -> p3 { MI_b0__0 = 0 &&  
        havoc() }


}

//----------------------------------
// Grammar of cpost_client_read_with_err
// <END_l2_cclient_read_header_prime_END> -> 'e'
// <INIT_PC15_prime_END> -> 'b0 := T' <INIT_l1_cclient_read_header_prime_END>
// <INIT_PC17_prime_END> -> 'assert (F)'
// <INIT_PC17_prime_END> -> 'assert (F)' <END_l2_cclient_read_header_prime_END>
// <INIT_PC24_prime_END> -> 'assert(!*)' <INIT_PC15_prime_END>
// <INIT_PC24_prime_END> -> 'assert(*)' <INIT_l1_cclient_read_header_prime_END>
// <INIT_l1_cclient_read_header_prime_END> -> 'assert(b0)' <INIT_PC17_prime_END>
// <cpost_client_read_with_err> -> 'assert(!b0)' <INIT_PC24_prime_END>
//----------------------------------
traverse_cpost_client_read_with_err_1 {
res: int;
out done: int;
initial p5;
final sf;



// <END_l2_cclient_read_header_prime_END> -> 'e'
p0 -> sf {  done' = 1 &&
       	MI_b0__1 = MF_b0__1 && 
       	havoc(done) }

// <INIT_PC15_prime_END> -> 'b0 := T' <INIT_l1_cclient_read_header_prime_END>
p1 -> p4 { MI_b0__1' = 1 &&  
        havoc(MI_b0__1) }

// <INIT_PC17_prime_END> -> 'assert (F)'
p2 -> sf { 1 = 1 &&  done' = 1 && MI_b0__1 = MF_b0__1 && 
        havoc(done) }

// <INIT_PC17_prime_END> -> 'assert (F)' <END_l2_cclient_read_header_prime_END>
p2 -> p0 { 1 = 1 &&  
        havoc() }

// <INIT_PC24_prime_END> -> 'assert(!*)' <INIT_PC15_prime_END>
p3 -> p1 { 1 = 1 &&  
        havoc() }

// <INIT_PC24_prime_END> -> 'assert(*)' <INIT_l1_cclient_read_header_prime_END>
p3 -> p4 { 1 = 1 &&  
        havoc() }

// <INIT_l1_cclient_read_header_prime_END> -> 'assert(b0)' <INIT_PC17_prime_END>
p4 -> p2 { MI_b0__1 = 1 &&  
        havoc() }

// <cpost_client_read_with_err> -> 'assert(!b0)' <INIT_PC24_prime_END>
p5 -> p3 { MI_b0__1 = 0 &&  
        havoc() }


}

//----------------------------------
// Grammar of cpost_client_read_without_err
// <PC15> -> 'b0 := T' <l1_cclient_read_header>
// <PC19> -> 'cpost_server_send_header' <PC20>
// <PC20> -> 'cpost_client_read' <PC21>
// <PC21> -> 'e'
// <PC24> -> <cclient_read_header> <PC25>
// <PC25> -> 'e'
// <cclient_read_header> -> 'assert(!*)' <PC15>
// <cclient_read_header> -> 'assert(*)' <l1_cclient_read_header>
// <cpost_client_read_without_err> -> 'assert(!b0)' <PC24>
// <cpost_client_read_without_err> -> 'assert(b0)' <l1_cpost_client_read>
// <l1_cclient_read_header> -> 'assert(!b0)' <l2_cclient_read_header>
// <l1_cpost_client_read> -> 'b0 := T' <l2_cpost_client_read>
// <l2_cclient_read_header> -> 'b0 := F' <PC19>
// <l2_cpost_client_read> -> 'e'
//----------------------------------
traverse_cpost_client_read_without_err_0 {
res: int;
out done: int;
initial si;
final sf;

si -> p5 { PC25 >= 1 && havoc() }
si -> p6 { cclient_read_header >= 1 && havoc() }
si -> p7 { cpost_client_read_without_err >= 1 && havoc() }


// <PC15> -> 'b0 := T' <l1_cclient_read_header>
p0 -> p8 { MI_b0__0' = 1 &&  
        havoc(MI_b0__0) }

// <PC19> -> 'cpost_server_send_header' <PC20>
p1 -> p2 { CNT_cpost_server_send_header' = CNT_cpost_server_send_header + 1  &&  
        havoc(CNT_cpost_server_send_header) }

// <PC20> -> 'cpost_client_read' <PC21>
p2 -> p3 { CNT_cpost_client_read' = CNT_cpost_client_read + 1  &&  
        havoc(CNT_cpost_client_read) }

// <PC21> -> 'e'
p3 -> sf {  done' = 1 &&
       	MI_b0__0 = MF_b0__0 && 
       	havoc(done) }

// <PC24> -> <cclient_read_header> <PC25> 
p4 -> p4_0 {0 >= 1 &&
        MF_b0__0' = MF_b0__0 && MF_b0__0' = MI_b0__0' &&
	 MI_b0__0' >= 0 && MI_b0__0' <= 1 && 
         PC25' = PC25 + 1 &&
        havoc(MF_b0__0, MF_b0__0, MI_b0__0,  PC25) }

p4_0 -> si4_0 { res' = 1 && havoc(res) }

si4_0 -> p6 { res = 1 && res' = 0 && cclient_read_header' = cclient_read_header + 1 && 
        havoc(res, cclient_read_header) }

p4 -> p4_1 {0 >= 1 &&
        MI_b0__0' = MI_b0__0 && MI_b0__0' = MF_b0__0' &&
	 MF_b0__0' >= 0 && MF_b0__0' <= 1 && 
         cclient_read_header' = cclient_read_header + 1 &&
        havoc(MI_b0__0, MI_b0__0, MF_b0__0,  cclient_read_header) }

p4_1 -> si4_1 { res' = 1 &&  havoc(res) }

si4_1 -> p5 { res = 1 && res' = 0 && PC25' = PC25 + 1 &&
        havoc(res, PC25) }

// <PC25> -> 'e'
p5 -> sf { PC25' = PC25 - 1 && done' = 1 &&
       	MI_b0__0 = MF_b0__0 && 
       	havoc(PC25, done) }

// <cclient_read_header> -> 'assert(!*)' <PC15>
p6 -> p0 { 1 = 1 && cclient_read_header' = cclient_read_header - 1 && 
        havoc(cclient_read_header) }

// <cclient_read_header> -> 'assert(*)' <l1_cclient_read_header>
p6 -> p8 { 1 = 1 && cclient_read_header' = cclient_read_header - 1 && 
        havoc(cclient_read_header) }

// <cpost_client_read_without_err> -> 'assert(!b0)' <PC24>
p7 -> p4 { MI_b0__0 = 0 && cpost_client_read_without_err' = cpost_client_read_without_err - 1 && 
        havoc(cpost_client_read_without_err) }

// <cpost_client_read_without_err> -> 'assert(b0)' <l1_cpost_client_read>
p7 -> p9 { MI_b0__0 = 1 && cpost_client_read_without_err' = cpost_client_read_without_err - 1 && 
        havoc(cpost_client_read_without_err) }

// <l1_cclient_read_header> -> 'assert(!b0)' <l2_cclient_read_header>
p8 -> p10 { MI_b0__0 = 0 &&  
        havoc() }

// <l1_cpost_client_read> -> 'b0 := T' <l2_cpost_client_read>
p9 -> p11 { MI_b0__0' = 1 &&  
        havoc(MI_b0__0) }

// <l2_cclient_read_header> -> 'b0 := F' <PC19>
p10 -> p1 { MI_b0__0' = 0 &&  
        havoc(MI_b0__0) }

// <l2_cpost_client_read> -> 'e'
p11 -> sf {  done' = 1 &&
       	MI_b0__0 = MF_b0__0 && 
       	havoc(done) }


}

//----------------------------------
// Grammar of cpost_client_read_without_err
// <PC15> -> 'b0 := T' <l1_cclient_read_header>
// <PC19> -> 'cpost_server_send_header' <PC20>
// <PC20> -> 'cpost_client_read' <PC21>
// <PC21> -> 'e'
// <PC24> -> <cclient_read_header> <PC25>
// <PC25> -> 'e'
// <cclient_read_header> -> 'assert(!*)' <PC15>
// <cclient_read_header> -> 'assert(*)' <l1_cclient_read_header>
// <cpost_client_read_without_err> -> 'assert(!b0)' <PC24>
// <cpost_client_read_without_err> -> 'assert(b0)' <l1_cpost_client_read>
// <l1_cclient_read_header> -> 'assert(!b0)' <l2_cclient_read_header>
// <l1_cpost_client_read> -> 'b0 := T' <l2_cpost_client_read>
// <l2_cclient_read_header> -> 'b0 := F' <PC19>
// <l2_cpost_client_read> -> 'e'
//----------------------------------
traverse_cpost_client_read_without_err_1 {
res: int;
out done: int;
initial si;
final sf;

si -> p5 { PC25 >= 1 && havoc() }
si -> p6 { cclient_read_header >= 1 && havoc() }
si -> p7 { cpost_client_read_without_err >= 1 && havoc() }


// <PC15> -> 'b0 := T' <l1_cclient_read_header>
p0 -> p8 { MI_b0__1' = 1 &&  
        havoc(MI_b0__1) }

// <PC19> -> 'cpost_server_send_header' <PC20>
p1 -> p2 { CNT_cpost_server_send_header' = CNT_cpost_server_send_header + 1  &&  
        havoc(CNT_cpost_server_send_header) }

// <PC20> -> 'cpost_client_read' <PC21>
p2 -> p3 { CNT_cpost_client_read' = CNT_cpost_client_read + 1  &&  
        havoc(CNT_cpost_client_read) }

// <PC21> -> 'e'
p3 -> sf {  done' = 1 &&
       	MI_b0__1 = MF_b0__1 && 
       	havoc(done) }

// <PC24> -> <cclient_read_header> <PC25> 
p4 -> p4_0 {1 >= 1 &&
        MF_b0__0' = MF_b0__1 && MF_b0__1' = MI_b0__0' &&
	 MI_b0__0' >= 0 && MI_b0__0' <= 1 && 
         PC25' = PC25 + 1 &&
        havoc(MF_b0__0, MF_b0__1, MI_b0__0,  PC25) }

p4_0 -> si4_0 { res' = traverse_cpost_client_read_without_err_0() && havoc(res) }

si4_0 -> p6 { res = 1 && res' = 0 && cclient_read_header' = cclient_read_header + 1 && 
        havoc(res, cclient_read_header) }

p4 -> p4_1 {1 >= 1 &&
        MI_b0__0' = MI_b0__1 && MI_b0__1' = MF_b0__0' &&
	 MF_b0__0' >= 0 && MF_b0__0' <= 1 && 
         cclient_read_header' = cclient_read_header + 1 &&
        havoc(MI_b0__0, MI_b0__1, MF_b0__0,  cclient_read_header) }

p4_1 -> si4_1 { res' = traverse_cpost_client_read_without_err_0() &&  havoc(res) }

si4_1 -> p5 { res = 1 && res' = 0 && PC25' = PC25 + 1 &&
        havoc(res, PC25) }

// <PC25> -> 'e'
p5 -> sf { PC25' = PC25 - 1 && done' = 1 &&
       	MI_b0__1 = MF_b0__1 && 
       	havoc(PC25, done) }

// <cclient_read_header> -> 'assert(!*)' <PC15>
p6 -> p0 { 1 = 1 && cclient_read_header' = cclient_read_header - 1 && 
        havoc(cclient_read_header) }

// <cclient_read_header> -> 'assert(*)' <l1_cclient_read_header>
p6 -> p8 { 1 = 1 && cclient_read_header' = cclient_read_header - 1 && 
        havoc(cclient_read_header) }

// <cpost_client_read_without_err> -> 'assert(!b0)' <PC24>
p7 -> p4 { MI_b0__1 = 0 && cpost_client_read_without_err' = cpost_client_read_without_err - 1 && 
        havoc(cpost_client_read_without_err) }

// <cpost_client_read_without_err> -> 'assert(b0)' <l1_cpost_client_read>
p7 -> p9 { MI_b0__1 = 1 && cpost_client_read_without_err' = cpost_client_read_without_err - 1 && 
        havoc(cpost_client_read_without_err) }

// <l1_cclient_read_header> -> 'assert(!b0)' <l2_cclient_read_header>
p8 -> p10 { MI_b0__1 = 0 &&  
        havoc() }

// <l1_cpost_client_read> -> 'b0 := T' <l2_cpost_client_read>
p9 -> p11 { MI_b0__1' = 1 &&  
        havoc(MI_b0__1) }

// <l2_cclient_read_header> -> 'b0 := F' <PC19>
p10 -> p1 { MI_b0__1' = 0 &&  
        havoc(MI_b0__1) }

// <l2_cpost_client_read> -> 'e'
p11 -> sf {  done' = 1 &&
       	MI_b0__1 = MF_b0__1 && 
       	havoc(done) }


}

//----------------------------------
// Grammar of cpost_new_client_without_err
// <PC30> -> 'cpost_client_read' <PC31>
// <PC31> -> 'e'
// <cpost_new_client_without_err> -> 'b0 := F' <PC30>
//----------------------------------
traverse_cpost_new_client_without_err_0 {
res: int;
out done: int;
initial p2;
final sf;



// <PC30> -> 'cpost_client_read' <PC31>
p0 -> p1 { CNT_cpost_client_read' = CNT_cpost_client_read + 1  &&  
        havoc(CNT_cpost_client_read) }

// <PC31> -> 'e'
p1 -> sf {  done' = 1 &&
       	MI_b0__0 = MF_b0__0 && 
       	havoc(done) }

// <cpost_new_client_without_err> -> 'b0 := F' <PC30>
p2 -> p0 { MI_b0__0' = 0 &&  
        havoc(MI_b0__0) }


}

//----------------------------------
// Grammar of cpost_new_client_without_err
// <PC30> -> 'cpost_client_read' <PC31>
// <PC31> -> 'e'
// <cpost_new_client_without_err> -> 'b0 := F' <PC30>
//----------------------------------
traverse_cpost_new_client_without_err_1 {
res: int;
out done: int;
initial p2;
final sf;



// <PC30> -> 'cpost_client_read' <PC31>
p0 -> p1 { CNT_cpost_client_read' = CNT_cpost_client_read + 1  &&  
        havoc(CNT_cpost_client_read) }

// <PC31> -> 'e'
p1 -> sf {  done' = 1 &&
       	MI_b0__1 = MF_b0__1 && 
       	havoc(done) }

// <cpost_new_client_without_err> -> 'b0 := F' <PC30>
p2 -> p0 { MI_b0__1' = 0 &&  
        havoc(MI_b0__1) }


}


