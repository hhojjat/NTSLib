/*
Licensed under the MIT License.
Copyright (C) 2012 EPFL (Switzerland) , Verimag (France), IMDEA Software (Spain).

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
nts pgm;

// Global Decls
main_without_err, main_with_err, PC2, cmain, PC25, cq, PC22, cf, END_PC25_prime_END, INIT_cq_END, END_PC22_prime_END, END_PC22_END, INIT_cf_END: int;
CNT_cpost_f: int;
MI_b0_b_eq_0__0: int;
MF_b0_b_eq_0__0: int;

MI_b0_b_eq_0__1: int;
MF_b0_b_eq_0__1: int;

main {
b0_b_eq_0, res: int;
nxt_b0_b_eq_0: int;
initial si;
final sf;
error se;

si -> s0 { b0_b_eq_0' >= 0 && b0_b_eq_0' <= 1 &&  main_without_err' = 0 && main_with_err' = 0 && PC2' = 0 && cmain' = 0 && PC25' = 0 && cq' = 0 && PC22' = 0 && cf' = 0 && END_PC25_prime_END' = 0 && INIT_cq_END' = 0 && END_PC22_prime_END' = 0 && END_PC22_END' = 0 && INIT_cf_END' = 0 && CNT_cpost_f' = 0 && havoc(b0_b_eq_0, main_without_err, main_with_err, PC2, cmain, PC25, cq, PC22, cf, END_PC25_prime_END, INIT_cq_END, END_PC22_prime_END, END_PC22_END, INIT_cf_END, CNT_cpost_f)}
s0 -> s1_0 { main_with_err' = main_with_err + 1 &&
       MI_b0_b_eq_0__1' = b0_b_eq_0 && MF_b0_b_eq_0__1' = nxt_b0_b_eq_0' &&
	 nxt_b0_b_eq_0' >= 0 && nxt_b0_b_eq_0' <= 1 && 
       havoc (main_with_err, MI_b0_b_eq_0__1, MF_b0_b_eq_0__1, nxt_b0_b_eq_0) }
s1_0 -> se_1 { res' = traverse_main_with_err_1() && havoc(res) }
se_1 -> se { res = 1 && res' = 0 && havoc(res) }

s0 -> s1 { main_without_err' = main_without_err + 1 &&
       MI_b0_b_eq_0__1' = b0_b_eq_0 && MF_b0_b_eq_0__1' = nxt_b0_b_eq_0' &&
	 nxt_b0_b_eq_0' >= 0 && nxt_b0_b_eq_0' <= 1 && 
       havoc (main_without_err, MI_b0_b_eq_0__1, MF_b0_b_eq_0__1, nxt_b0_b_eq_0) }
s1 -> s2_1 { res' = traverse_main_without_err_1() && havoc(res) }
s2_1 -> eventloop { res = 1 && res' = 0 && b0_b_eq_0' = nxt_b0_b_eq_0 &&  havoc(res, b0_b_eq_0) }

eventloop -> sf { CNT_cpost_f = 0 && havoc() }
eventloop -> s3 { CNT_cpost_f >= 1 && CNT_cpost_f' = CNT_cpost_f - 1 && havoc(CNT_cpost_f) }

s3 -> s4 { 
           MI_b0_b_eq_0__1' = b0_b_eq_0 && MF_b0_b_eq_0__1' = nxt_b0_b_eq_0' &&
	 nxt_b0_b_eq_0' >= 0 && nxt_b0_b_eq_0' <= 1 && 
           havoc( MI_b0_b_eq_0__1, MF_b0_b_eq_0__1, nxt_b0_b_eq_0) }

s4 -> se_4 { res' = traverse_cpost_f_with_err_1() && havoc(res) }
se_4 -> se { res = 1 && res' = 0 && b0_b_eq_0' = nxt_b0_b_eq_0 &&  havoc(res, b0_b_eq_0) }

s3 -> s5 { 
           MI_b0_b_eq_0__1' = b0_b_eq_0 && MF_b0_b_eq_0__1' = nxt_b0_b_eq_0' &&
	 nxt_b0_b_eq_0' >= 0 && nxt_b0_b_eq_0' <= 1 && 
           havoc( MI_b0_b_eq_0__1, MF_b0_b_eq_0__1, nxt_b0_b_eq_0) }

s5 -> s2_5 { res' = traverse_cpost_f_without_err_1() && havoc(res) }
s2_5 -> eventloop { b0_b_eq_0' = nxt_b0_b_eq_0 &&  havoc(b0_b_eq_0) }

}

//----------------------------------
// Grammar of main_with_err
// <END_PC22_END> -> 'e'
// <END_PC22_prime_END> -> 'e'
// <END_PC25_prime_END> -> 'e'
// <END_l2_cf_END> -> 'e'
// <END_l2_cf_prime_END> -> 'e'
// <INIT_PC21_END> -> <INIT_cf_END> <END_PC22_END>
// <INIT_PC21_prime_END> -> 'assert(!b0_b_eq_0)' <INIT_l1_cf_prime_END>
// <INIT_PC21_prime_END> -> <INIT_cf_END> <END_PC22_prime_END>
// <INIT_PC24_prime_END> -> 'b0_b_eq_0 := T' <INIT_PC21_prime_END>
// <INIT_PC24_prime_END> -> <INIT_cq_END> <END_PC25_prime_END>
// <INIT_cf_END> -> 'assert(!b0_b_eq_0)' <INIT_l1_cf_END>
// <INIT_cq_END> -> 'b0_b_eq_0 := T' <INIT_PC21_END>
// <INIT_l1_cf_END> -> 'assert (F)' <END_l2_cf_END>
// <INIT_l1_cf_prime_END> -> 'assert (F)'
// <INIT_l1_cf_prime_END> -> 'assert (F)' <END_l2_cf_prime_END>
// <main_with_err> -> 'cpost_f' <INIT_PC24_prime_END>
//----------------------------------
traverse_main_with_err_0 {
res: int;
out done: int;
initial si;
final sf;

si -> p0 { END_PC22_END >= 1 && havoc() }
si -> p1 { END_PC22_prime_END >= 1 && havoc() }
si -> p2 { END_PC25_prime_END >= 1 && havoc() }
si -> p8 { INIT_cf_END >= 1 && havoc() }
si -> p9 { INIT_cq_END >= 1 && havoc() }
si -> p12 { main_with_err >= 1 && havoc() }


// <END_PC22_END> -> 'e'
p0 -> sf { END_PC22_END' = END_PC22_END - 1 && done' = 1 &&
       	MI_b0_b_eq_0__0 = MF_b0_b_eq_0__0 && 
       	havoc(END_PC22_END, done) }

// <END_PC22_prime_END> -> 'e'
p1 -> sf { END_PC22_prime_END' = END_PC22_prime_END - 1 && done' = 1 &&
       	MI_b0_b_eq_0__0 = MF_b0_b_eq_0__0 && 
       	havoc(END_PC22_prime_END, done) }

// <END_PC25_prime_END> -> 'e'
p2 -> sf { END_PC25_prime_END' = END_PC25_prime_END - 1 && done' = 1 &&
       	MI_b0_b_eq_0__0 = MF_b0_b_eq_0__0 && 
       	havoc(END_PC25_prime_END, done) }

// <END_l2_cf_END> -> 'e'
p3 -> sf {  done' = 1 &&
       	MI_b0_b_eq_0__0 = MF_b0_b_eq_0__0 && 
       	havoc(done) }

// <END_l2_cf_prime_END> -> 'e'
p4 -> sf {  done' = 1 &&
       	MI_b0_b_eq_0__0 = MF_b0_b_eq_0__0 && 
       	havoc(done) }

// <INIT_PC21_END> -> <INIT_cf_END> <END_PC22_END> 
p5 -> p5_0 {0 >= 1 &&
        MF_b0_b_eq_0__0' = MF_b0_b_eq_0__0 && MF_b0_b_eq_0__0' = MI_b0_b_eq_0__0' &&
	 MI_b0_b_eq_0__0' >= 0 && MI_b0_b_eq_0__0' <= 1 && 
         END_PC22_END' = END_PC22_END + 1 &&
        havoc(MF_b0_b_eq_0__0, MF_b0_b_eq_0__0, MI_b0_b_eq_0__0,  END_PC22_END) }

p5_0 -> si5_0 { res' = 1 && havoc(res) }

si5_0 -> p8 { res = 1 && res' = 0 && INIT_cf_END' = INIT_cf_END + 1 && 
        havoc(res, INIT_cf_END) }

p5 -> p5_1 {0 >= 1 &&
        MI_b0_b_eq_0__0' = MI_b0_b_eq_0__0 && MI_b0_b_eq_0__0' = MF_b0_b_eq_0__0' &&
	 MF_b0_b_eq_0__0' >= 0 && MF_b0_b_eq_0__0' <= 1 && 
         INIT_cf_END' = INIT_cf_END + 1 &&
        havoc(MI_b0_b_eq_0__0, MI_b0_b_eq_0__0, MF_b0_b_eq_0__0,  INIT_cf_END) }

p5_1 -> si5_1 { res' = 1 &&  havoc(res) }

si5_1 -> p0 { res = 1 && res' = 0 && END_PC22_END' = END_PC22_END + 1 &&
        havoc(res, END_PC22_END) }

// <INIT_PC21_prime_END> -> 'assert(!b0_b_eq_0)' <INIT_l1_cf_prime_END>
p6 -> p11 { MI_b0_b_eq_0__0 = 0 &&  
        havoc() }

// <INIT_PC21_prime_END> -> <INIT_cf_END> <END_PC22_prime_END> 
p6 -> p6_2 {0 >= 1 &&
        MF_b0_b_eq_0__0' = MF_b0_b_eq_0__0 && MF_b0_b_eq_0__0' = MI_b0_b_eq_0__0' &&
	 MI_b0_b_eq_0__0' >= 0 && MI_b0_b_eq_0__0' <= 1 && 
         END_PC22_prime_END' = END_PC22_prime_END + 1 &&
        havoc(MF_b0_b_eq_0__0, MF_b0_b_eq_0__0, MI_b0_b_eq_0__0,  END_PC22_prime_END) }

p6_2 -> si6_2 { res' = 1 && havoc(res) }

si6_2 -> p8 { res = 1 && res' = 0 && INIT_cf_END' = INIT_cf_END + 1 && 
        havoc(res, INIT_cf_END) }

p6 -> p6_3 {0 >= 1 &&
        MI_b0_b_eq_0__0' = MI_b0_b_eq_0__0 && MI_b0_b_eq_0__0' = MF_b0_b_eq_0__0' &&
	 MF_b0_b_eq_0__0' >= 0 && MF_b0_b_eq_0__0' <= 1 && 
         INIT_cf_END' = INIT_cf_END + 1 &&
        havoc(MI_b0_b_eq_0__0, MI_b0_b_eq_0__0, MF_b0_b_eq_0__0,  INIT_cf_END) }

p6_3 -> si6_3 { res' = 1 &&  havoc(res) }

si6_3 -> p1 { res = 1 && res' = 0 && END_PC22_prime_END' = END_PC22_prime_END + 1 &&
        havoc(res, END_PC22_prime_END) }

// <INIT_PC24_prime_END> -> 'b0_b_eq_0 := T' <INIT_PC21_prime_END>
p7 -> p6 { MI_b0_b_eq_0__0' = 1 &&  
        havoc(MI_b0_b_eq_0__0) }

// <INIT_PC24_prime_END> -> <INIT_cq_END> <END_PC25_prime_END> 
p7 -> p7_2 {0 >= 1 &&
        MF_b0_b_eq_0__0' = MF_b0_b_eq_0__0 && MF_b0_b_eq_0__0' = MI_b0_b_eq_0__0' &&
	 MI_b0_b_eq_0__0' >= 0 && MI_b0_b_eq_0__0' <= 1 && 
         END_PC25_prime_END' = END_PC25_prime_END + 1 &&
        havoc(MF_b0_b_eq_0__0, MF_b0_b_eq_0__0, MI_b0_b_eq_0__0,  END_PC25_prime_END) }

p7_2 -> si7_2 { res' = 1 && havoc(res) }

si7_2 -> p9 { res = 1 && res' = 0 && INIT_cq_END' = INIT_cq_END + 1 && 
        havoc(res, INIT_cq_END) }

p7 -> p7_3 {0 >= 1 &&
        MI_b0_b_eq_0__0' = MI_b0_b_eq_0__0 && MI_b0_b_eq_0__0' = MF_b0_b_eq_0__0' &&
	 MF_b0_b_eq_0__0' >= 0 && MF_b0_b_eq_0__0' <= 1 && 
         INIT_cq_END' = INIT_cq_END + 1 &&
        havoc(MI_b0_b_eq_0__0, MI_b0_b_eq_0__0, MF_b0_b_eq_0__0,  INIT_cq_END) }

p7_3 -> si7_3 { res' = 1 &&  havoc(res) }

si7_3 -> p2 { res = 1 && res' = 0 && END_PC25_prime_END' = END_PC25_prime_END + 1 &&
        havoc(res, END_PC25_prime_END) }

// <INIT_cf_END> -> 'assert(!b0_b_eq_0)' <INIT_l1_cf_END>
p8 -> p10 { MI_b0_b_eq_0__0 = 0 && INIT_cf_END' = INIT_cf_END - 1 && 
        havoc(INIT_cf_END) }

// <INIT_cq_END> -> 'b0_b_eq_0 := T' <INIT_PC21_END>
p9 -> p5 { MI_b0_b_eq_0__0' = 1 && INIT_cq_END' = INIT_cq_END - 1 && 
        havoc(MI_b0_b_eq_0__0, INIT_cq_END) }

// <INIT_l1_cf_END> -> 'assert (F)' <END_l2_cf_END>
p10 -> p3 { 1 = 1 &&  
        havoc() }

// <INIT_l1_cf_prime_END> -> 'assert (F)'
p11 -> sf { 1 = 1 &&  done' = 1 && MI_b0_b_eq_0__0 = MF_b0_b_eq_0__0 && 
        havoc(done) }

// <INIT_l1_cf_prime_END> -> 'assert (F)' <END_l2_cf_prime_END>
p11 -> p4 { 1 = 1 &&  
        havoc() }

// <main_with_err> -> 'cpost_f' <INIT_PC24_prime_END>
p12 -> p7 { CNT_cpost_f' = CNT_cpost_f + 1  && main_with_err' = main_with_err - 1 && 
        havoc(CNT_cpost_f, main_with_err) }


}

//----------------------------------
// Grammar of main_with_err
// <END_PC22_END> -> 'e'
// <END_PC22_prime_END> -> 'e'
// <END_PC25_prime_END> -> 'e'
// <END_l2_cf_END> -> 'e'
// <END_l2_cf_prime_END> -> 'e'
// <INIT_PC21_END> -> <INIT_cf_END> <END_PC22_END>
// <INIT_PC21_prime_END> -> 'assert(!b0_b_eq_0)' <INIT_l1_cf_prime_END>
// <INIT_PC21_prime_END> -> <INIT_cf_END> <END_PC22_prime_END>
// <INIT_PC24_prime_END> -> 'b0_b_eq_0 := T' <INIT_PC21_prime_END>
// <INIT_PC24_prime_END> -> <INIT_cq_END> <END_PC25_prime_END>
// <INIT_cf_END> -> 'assert(!b0_b_eq_0)' <INIT_l1_cf_END>
// <INIT_cq_END> -> 'b0_b_eq_0 := T' <INIT_PC21_END>
// <INIT_l1_cf_END> -> 'assert (F)' <END_l2_cf_END>
// <INIT_l1_cf_prime_END> -> 'assert (F)'
// <INIT_l1_cf_prime_END> -> 'assert (F)' <END_l2_cf_prime_END>
// <main_with_err> -> 'cpost_f' <INIT_PC24_prime_END>
//----------------------------------
traverse_main_with_err_1 {
res: int;
out done: int;
initial si;
final sf;

si -> p0 { END_PC22_END >= 1 && havoc() }
si -> p1 { END_PC22_prime_END >= 1 && havoc() }
si -> p2 { END_PC25_prime_END >= 1 && havoc() }
si -> p8 { INIT_cf_END >= 1 && havoc() }
si -> p9 { INIT_cq_END >= 1 && havoc() }
si -> p12 { main_with_err >= 1 && havoc() }


// <END_PC22_END> -> 'e'
p0 -> sf { END_PC22_END' = END_PC22_END - 1 && done' = 1 &&
       	MI_b0_b_eq_0__1 = MF_b0_b_eq_0__1 && 
       	havoc(END_PC22_END, done) }

// <END_PC22_prime_END> -> 'e'
p1 -> sf { END_PC22_prime_END' = END_PC22_prime_END - 1 && done' = 1 &&
       	MI_b0_b_eq_0__1 = MF_b0_b_eq_0__1 && 
       	havoc(END_PC22_prime_END, done) }

// <END_PC25_prime_END> -> 'e'
p2 -> sf { END_PC25_prime_END' = END_PC25_prime_END - 1 && done' = 1 &&
       	MI_b0_b_eq_0__1 = MF_b0_b_eq_0__1 && 
       	havoc(END_PC25_prime_END, done) }

// <END_l2_cf_END> -> 'e'
p3 -> sf {  done' = 1 &&
       	MI_b0_b_eq_0__1 = MF_b0_b_eq_0__1 && 
       	havoc(done) }

// <END_l2_cf_prime_END> -> 'e'
p4 -> sf {  done' = 1 &&
       	MI_b0_b_eq_0__1 = MF_b0_b_eq_0__1 && 
       	havoc(done) }

// <INIT_PC21_END> -> <INIT_cf_END> <END_PC22_END> 
p5 -> p5_0 {1 >= 1 &&
        MF_b0_b_eq_0__0' = MF_b0_b_eq_0__1 && MF_b0_b_eq_0__1' = MI_b0_b_eq_0__0' &&
	 MI_b0_b_eq_0__0' >= 0 && MI_b0_b_eq_0__0' <= 1 && 
         END_PC22_END' = END_PC22_END + 1 &&
        havoc(MF_b0_b_eq_0__0, MF_b0_b_eq_0__1, MI_b0_b_eq_0__0,  END_PC22_END) }

p5_0 -> si5_0 { res' = traverse_main_with_err_0() && havoc(res) }

si5_0 -> p8 { res = 1 && res' = 0 && INIT_cf_END' = INIT_cf_END + 1 && 
        havoc(res, INIT_cf_END) }

p5 -> p5_1 {1 >= 1 &&
        MI_b0_b_eq_0__0' = MI_b0_b_eq_0__1 && MI_b0_b_eq_0__1' = MF_b0_b_eq_0__0' &&
	 MF_b0_b_eq_0__0' >= 0 && MF_b0_b_eq_0__0' <= 1 && 
         INIT_cf_END' = INIT_cf_END + 1 &&
        havoc(MI_b0_b_eq_0__0, MI_b0_b_eq_0__1, MF_b0_b_eq_0__0,  INIT_cf_END) }

p5_1 -> si5_1 { res' = traverse_main_with_err_0() &&  havoc(res) }

si5_1 -> p0 { res = 1 && res' = 0 && END_PC22_END' = END_PC22_END + 1 &&
        havoc(res, END_PC22_END) }

// <INIT_PC21_prime_END> -> 'assert(!b0_b_eq_0)' <INIT_l1_cf_prime_END>
p6 -> p11 { MI_b0_b_eq_0__1 = 0 &&  
        havoc() }

// <INIT_PC21_prime_END> -> <INIT_cf_END> <END_PC22_prime_END> 
p6 -> p6_2 {1 >= 1 &&
        MF_b0_b_eq_0__0' = MF_b0_b_eq_0__1 && MF_b0_b_eq_0__1' = MI_b0_b_eq_0__0' &&
	 MI_b0_b_eq_0__0' >= 0 && MI_b0_b_eq_0__0' <= 1 && 
         END_PC22_prime_END' = END_PC22_prime_END + 1 &&
        havoc(MF_b0_b_eq_0__0, MF_b0_b_eq_0__1, MI_b0_b_eq_0__0,  END_PC22_prime_END) }

p6_2 -> si6_2 { res' = traverse_main_with_err_0() && havoc(res) }

si6_2 -> p8 { res = 1 && res' = 0 && INIT_cf_END' = INIT_cf_END + 1 && 
        havoc(res, INIT_cf_END) }

p6 -> p6_3 {1 >= 1 &&
        MI_b0_b_eq_0__0' = MI_b0_b_eq_0__1 && MI_b0_b_eq_0__1' = MF_b0_b_eq_0__0' &&
	 MF_b0_b_eq_0__0' >= 0 && MF_b0_b_eq_0__0' <= 1 && 
         INIT_cf_END' = INIT_cf_END + 1 &&
        havoc(MI_b0_b_eq_0__0, MI_b0_b_eq_0__1, MF_b0_b_eq_0__0,  INIT_cf_END) }

p6_3 -> si6_3 { res' = traverse_main_with_err_0() &&  havoc(res) }

si6_3 -> p1 { res = 1 && res' = 0 && END_PC22_prime_END' = END_PC22_prime_END + 1 &&
        havoc(res, END_PC22_prime_END) }

// <INIT_PC24_prime_END> -> 'b0_b_eq_0 := T' <INIT_PC21_prime_END>
p7 -> p6 { MI_b0_b_eq_0__1' = 1 &&  
        havoc(MI_b0_b_eq_0__1) }

// <INIT_PC24_prime_END> -> <INIT_cq_END> <END_PC25_prime_END> 
p7 -> p7_2 {1 >= 1 &&
        MF_b0_b_eq_0__0' = MF_b0_b_eq_0__1 && MF_b0_b_eq_0__1' = MI_b0_b_eq_0__0' &&
	 MI_b0_b_eq_0__0' >= 0 && MI_b0_b_eq_0__0' <= 1 && 
         END_PC25_prime_END' = END_PC25_prime_END + 1 &&
        havoc(MF_b0_b_eq_0__0, MF_b0_b_eq_0__1, MI_b0_b_eq_0__0,  END_PC25_prime_END) }

p7_2 -> si7_2 { res' = traverse_main_with_err_0() && havoc(res) }

si7_2 -> p9 { res = 1 && res' = 0 && INIT_cq_END' = INIT_cq_END + 1 && 
        havoc(res, INIT_cq_END) }

p7 -> p7_3 {1 >= 1 &&
        MI_b0_b_eq_0__0' = MI_b0_b_eq_0__1 && MI_b0_b_eq_0__1' = MF_b0_b_eq_0__0' &&
	 MF_b0_b_eq_0__0' >= 0 && MF_b0_b_eq_0__0' <= 1 && 
         INIT_cq_END' = INIT_cq_END + 1 &&
        havoc(MI_b0_b_eq_0__0, MI_b0_b_eq_0__1, MF_b0_b_eq_0__0,  INIT_cq_END) }

p7_3 -> si7_3 { res' = traverse_main_with_err_0() &&  havoc(res) }

si7_3 -> p2 { res = 1 && res' = 0 && END_PC25_prime_END' = END_PC25_prime_END + 1 &&
        havoc(res, END_PC25_prime_END) }

// <INIT_cf_END> -> 'assert(!b0_b_eq_0)' <INIT_l1_cf_END>
p8 -> p10 { MI_b0_b_eq_0__1 = 0 && INIT_cf_END' = INIT_cf_END - 1 && 
        havoc(INIT_cf_END) }

// <INIT_cq_END> -> 'b0_b_eq_0 := T' <INIT_PC21_END>
p9 -> p5 { MI_b0_b_eq_0__1' = 1 && INIT_cq_END' = INIT_cq_END - 1 && 
        havoc(MI_b0_b_eq_0__1, INIT_cq_END) }

// <INIT_l1_cf_END> -> 'assert (F)' <END_l2_cf_END>
p10 -> p3 { 1 = 1 &&  
        havoc() }

// <INIT_l1_cf_prime_END> -> 'assert (F)'
p11 -> sf { 1 = 1 &&  done' = 1 && MI_b0_b_eq_0__1 = MF_b0_b_eq_0__1 && 
        havoc(done) }

// <INIT_l1_cf_prime_END> -> 'assert (F)' <END_l2_cf_prime_END>
p11 -> p4 { 1 = 1 &&  
        havoc() }

// <main_with_err> -> 'cpost_f' <INIT_PC24_prime_END>
p12 -> p7 { CNT_cpost_f' = CNT_cpost_f + 1  && main_with_err' = main_with_err - 1 && 
        havoc(CNT_cpost_f, main_with_err) }


}

//----------------------------------
// Grammar of main_without_err
// <PC16> -> 'b0_b_eq_0 := F' <PC17>
// <PC17> -> 'e'
// <PC2> -> 'e'
// <PC21> -> <cf> <PC22>
// <PC22> -> 'e'
// <PC24> -> <cq> <PC25>
// <PC25> -> 'assert (T)' <PC26>
// <PC26> -> 'e'
// <cf> -> 'assert(b0_b_eq_0)' <PC16>
// <cmain> -> 'cpost_f' <PC24>
// <cq> -> 'b0_b_eq_0 := T' <PC21>
// <main_without_err> -> <cmain> <PC2>
//----------------------------------
traverse_main_without_err_0 {
res: int;
out done: int;
initial si;
final sf;

si -> p2 { PC2 >= 1 && havoc() }
si -> p4 { PC22 >= 1 && havoc() }
si -> p6 { PC25 >= 1 && havoc() }
si -> p8 { cf >= 1 && havoc() }
si -> p9 { cmain >= 1 && havoc() }
si -> p10 { cq >= 1 && havoc() }
si -> p11 { main_without_err >= 1 && havoc() }


// <PC16> -> 'b0_b_eq_0 := F' <PC17>
p0 -> p1 { MI_b0_b_eq_0__0' = 0 &&  
        havoc(MI_b0_b_eq_0__0) }

// <PC17> -> 'e'
p1 -> sf {  done' = 1 &&
       	MI_b0_b_eq_0__0 = MF_b0_b_eq_0__0 && 
       	havoc(done) }

// <PC2> -> 'e'
p2 -> sf { PC2' = PC2 - 1 && done' = 1 &&
       	MI_b0_b_eq_0__0 = MF_b0_b_eq_0__0 && 
       	havoc(PC2, done) }

// <PC21> -> <cf> <PC22> 
p3 -> p3_0 {0 >= 1 &&
        MF_b0_b_eq_0__0' = MF_b0_b_eq_0__0 && MF_b0_b_eq_0__0' = MI_b0_b_eq_0__0' &&
	 MI_b0_b_eq_0__0' >= 0 && MI_b0_b_eq_0__0' <= 1 && 
         PC22' = PC22 + 1 &&
        havoc(MF_b0_b_eq_0__0, MF_b0_b_eq_0__0, MI_b0_b_eq_0__0,  PC22) }

p3_0 -> si3_0 { res' = 1 && havoc(res) }

si3_0 -> p8 { res = 1 && res' = 0 && cf' = cf + 1 && 
        havoc(res, cf) }

p3 -> p3_1 {0 >= 1 &&
        MI_b0_b_eq_0__0' = MI_b0_b_eq_0__0 && MI_b0_b_eq_0__0' = MF_b0_b_eq_0__0' &&
	 MF_b0_b_eq_0__0' >= 0 && MF_b0_b_eq_0__0' <= 1 && 
         cf' = cf + 1 &&
        havoc(MI_b0_b_eq_0__0, MI_b0_b_eq_0__0, MF_b0_b_eq_0__0,  cf) }

p3_1 -> si3_1 { res' = 1 &&  havoc(res) }

si3_1 -> p4 { res = 1 && res' = 0 && PC22' = PC22 + 1 &&
        havoc(res, PC22) }

// <PC22> -> 'e'
p4 -> sf { PC22' = PC22 - 1 && done' = 1 &&
       	MI_b0_b_eq_0__0 = MF_b0_b_eq_0__0 && 
       	havoc(PC22, done) }

// <PC24> -> <cq> <PC25> 
p5 -> p5_0 {0 >= 1 &&
        MF_b0_b_eq_0__0' = MF_b0_b_eq_0__0 && MF_b0_b_eq_0__0' = MI_b0_b_eq_0__0' &&
	 MI_b0_b_eq_0__0' >= 0 && MI_b0_b_eq_0__0' <= 1 && 
         PC25' = PC25 + 1 &&
        havoc(MF_b0_b_eq_0__0, MF_b0_b_eq_0__0, MI_b0_b_eq_0__0,  PC25) }

p5_0 -> si5_0 { res' = 1 && havoc(res) }

si5_0 -> p10 { res = 1 && res' = 0 && cq' = cq + 1 && 
        havoc(res, cq) }

p5 -> p5_1 {0 >= 1 &&
        MI_b0_b_eq_0__0' = MI_b0_b_eq_0__0 && MI_b0_b_eq_0__0' = MF_b0_b_eq_0__0' &&
	 MF_b0_b_eq_0__0' >= 0 && MF_b0_b_eq_0__0' <= 1 && 
         cq' = cq + 1 &&
        havoc(MI_b0_b_eq_0__0, MI_b0_b_eq_0__0, MF_b0_b_eq_0__0,  cq) }

p5_1 -> si5_1 { res' = 1 &&  havoc(res) }

si5_1 -> p6 { res = 1 && res' = 0 && PC25' = PC25 + 1 &&
        havoc(res, PC25) }

// <PC25> -> 'assert (T)' <PC26>
p6 -> p7 { 1 = 1 && PC25' = PC25 - 1 && 
        havoc(PC25) }

// <PC26> -> 'e'
p7 -> sf {  done' = 1 &&
       	MI_b0_b_eq_0__0 = MF_b0_b_eq_0__0 && 
       	havoc(done) }

// <cf> -> 'assert(b0_b_eq_0)' <PC16>
p8 -> p0 { MI_b0_b_eq_0__0 = 1 && cf' = cf - 1 && 
        havoc(cf) }

// <cmain> -> 'cpost_f' <PC24>
p9 -> p5 { CNT_cpost_f' = CNT_cpost_f + 1  && cmain' = cmain - 1 && 
        havoc(CNT_cpost_f, cmain) }

// <cq> -> 'b0_b_eq_0 := T' <PC21>
p10 -> p3 { MI_b0_b_eq_0__0' = 1 && cq' = cq - 1 && 
        havoc(MI_b0_b_eq_0__0, cq) }

// <main_without_err> -> <cmain> <PC2> 
p11 -> p11_0 {0 >= 1 &&
        MF_b0_b_eq_0__0' = MF_b0_b_eq_0__0 && MF_b0_b_eq_0__0' = MI_b0_b_eq_0__0' &&
	 MI_b0_b_eq_0__0' >= 0 && MI_b0_b_eq_0__0' <= 1 && 
        main_without_err' = main_without_err - 1 && PC2' = PC2 + 1 &&
        havoc(MF_b0_b_eq_0__0, MF_b0_b_eq_0__0, MI_b0_b_eq_0__0,  main_without_err, PC2) }

p11_0 -> si11_0 { res' = 1 && havoc(res) }

si11_0 -> p9 { res = 1 && res' = 0 && cmain' = cmain + 1 && 
        havoc(res, cmain) }

p11 -> p11_1 {0 >= 1 &&
        MI_b0_b_eq_0__0' = MI_b0_b_eq_0__0 && MI_b0_b_eq_0__0' = MF_b0_b_eq_0__0' &&
	 MF_b0_b_eq_0__0' >= 0 && MF_b0_b_eq_0__0' <= 1 && 
        main_without_err' = main_without_err - 1 && cmain' = cmain + 1 &&
        havoc(MI_b0_b_eq_0__0, MI_b0_b_eq_0__0, MF_b0_b_eq_0__0,  main_without_err, cmain) }

p11_1 -> si11_1 { res' = 1 &&  havoc(res) }

si11_1 -> p2 { res = 1 && res' = 0 && PC2' = PC2 + 1 &&
        havoc(res, PC2) }


}

//----------------------------------
// Grammar of main_without_err
// <PC16> -> 'b0_b_eq_0 := F' <PC17>
// <PC17> -> 'e'
// <PC2> -> 'e'
// <PC21> -> <cf> <PC22>
// <PC22> -> 'e'
// <PC24> -> <cq> <PC25>
// <PC25> -> 'assert (T)' <PC26>
// <PC26> -> 'e'
// <cf> -> 'assert(b0_b_eq_0)' <PC16>
// <cmain> -> 'cpost_f' <PC24>
// <cq> -> 'b0_b_eq_0 := T' <PC21>
// <main_without_err> -> <cmain> <PC2>
//----------------------------------
traverse_main_without_err_1 {
res: int;
out done: int;
initial si;
final sf;

si -> p2 { PC2 >= 1 && havoc() }
si -> p4 { PC22 >= 1 && havoc() }
si -> p6 { PC25 >= 1 && havoc() }
si -> p8 { cf >= 1 && havoc() }
si -> p9 { cmain >= 1 && havoc() }
si -> p10 { cq >= 1 && havoc() }
si -> p11 { main_without_err >= 1 && havoc() }


// <PC16> -> 'b0_b_eq_0 := F' <PC17>
p0 -> p1 { MI_b0_b_eq_0__1' = 0 &&  
        havoc(MI_b0_b_eq_0__1) }

// <PC17> -> 'e'
p1 -> sf {  done' = 1 &&
       	MI_b0_b_eq_0__1 = MF_b0_b_eq_0__1 && 
       	havoc(done) }

// <PC2> -> 'e'
p2 -> sf { PC2' = PC2 - 1 && done' = 1 &&
       	MI_b0_b_eq_0__1 = MF_b0_b_eq_0__1 && 
       	havoc(PC2, done) }

// <PC21> -> <cf> <PC22> 
p3 -> p3_0 {1 >= 1 &&
        MF_b0_b_eq_0__0' = MF_b0_b_eq_0__1 && MF_b0_b_eq_0__1' = MI_b0_b_eq_0__0' &&
	 MI_b0_b_eq_0__0' >= 0 && MI_b0_b_eq_0__0' <= 1 && 
         PC22' = PC22 + 1 &&
        havoc(MF_b0_b_eq_0__0, MF_b0_b_eq_0__1, MI_b0_b_eq_0__0,  PC22) }

p3_0 -> si3_0 { res' = traverse_main_without_err_0() && havoc(res) }

si3_0 -> p8 { res = 1 && res' = 0 && cf' = cf + 1 && 
        havoc(res, cf) }

p3 -> p3_1 {1 >= 1 &&
        MI_b0_b_eq_0__0' = MI_b0_b_eq_0__1 && MI_b0_b_eq_0__1' = MF_b0_b_eq_0__0' &&
	 MF_b0_b_eq_0__0' >= 0 && MF_b0_b_eq_0__0' <= 1 && 
         cf' = cf + 1 &&
        havoc(MI_b0_b_eq_0__0, MI_b0_b_eq_0__1, MF_b0_b_eq_0__0,  cf) }

p3_1 -> si3_1 { res' = traverse_main_without_err_0() &&  havoc(res) }

si3_1 -> p4 { res = 1 && res' = 0 && PC22' = PC22 + 1 &&
        havoc(res, PC22) }

// <PC22> -> 'e'
p4 -> sf { PC22' = PC22 - 1 && done' = 1 &&
       	MI_b0_b_eq_0__1 = MF_b0_b_eq_0__1 && 
       	havoc(PC22, done) }

// <PC24> -> <cq> <PC25> 
p5 -> p5_0 {1 >= 1 &&
        MF_b0_b_eq_0__0' = MF_b0_b_eq_0__1 && MF_b0_b_eq_0__1' = MI_b0_b_eq_0__0' &&
	 MI_b0_b_eq_0__0' >= 0 && MI_b0_b_eq_0__0' <= 1 && 
         PC25' = PC25 + 1 &&
        havoc(MF_b0_b_eq_0__0, MF_b0_b_eq_0__1, MI_b0_b_eq_0__0,  PC25) }

p5_0 -> si5_0 { res' = traverse_main_without_err_0() && havoc(res) }

si5_0 -> p10 { res = 1 && res' = 0 && cq' = cq + 1 && 
        havoc(res, cq) }

p5 -> p5_1 {1 >= 1 &&
        MI_b0_b_eq_0__0' = MI_b0_b_eq_0__1 && MI_b0_b_eq_0__1' = MF_b0_b_eq_0__0' &&
	 MF_b0_b_eq_0__0' >= 0 && MF_b0_b_eq_0__0' <= 1 && 
         cq' = cq + 1 &&
        havoc(MI_b0_b_eq_0__0, MI_b0_b_eq_0__1, MF_b0_b_eq_0__0,  cq) }

p5_1 -> si5_1 { res' = traverse_main_without_err_0() &&  havoc(res) }

si5_1 -> p6 { res = 1 && res' = 0 && PC25' = PC25 + 1 &&
        havoc(res, PC25) }

// <PC25> -> 'assert (T)' <PC26>
p6 -> p7 { 1 = 1 && PC25' = PC25 - 1 && 
        havoc(PC25) }

// <PC26> -> 'e'
p7 -> sf {  done' = 1 &&
       	MI_b0_b_eq_0__1 = MF_b0_b_eq_0__1 && 
       	havoc(done) }

// <cf> -> 'assert(b0_b_eq_0)' <PC16>
p8 -> p0 { MI_b0_b_eq_0__1 = 1 && cf' = cf - 1 && 
        havoc(cf) }

// <cmain> -> 'cpost_f' <PC24>
p9 -> p5 { CNT_cpost_f' = CNT_cpost_f + 1  && cmain' = cmain - 1 && 
        havoc(CNT_cpost_f, cmain) }

// <cq> -> 'b0_b_eq_0 := T' <PC21>
p10 -> p3 { MI_b0_b_eq_0__1' = 1 && cq' = cq - 1 && 
        havoc(MI_b0_b_eq_0__1, cq) }

// <main_without_err> -> <cmain> <PC2> 
p11 -> p11_0 {1 >= 1 &&
        MF_b0_b_eq_0__0' = MF_b0_b_eq_0__1 && MF_b0_b_eq_0__1' = MI_b0_b_eq_0__0' &&
	 MI_b0_b_eq_0__0' >= 0 && MI_b0_b_eq_0__0' <= 1 && 
        main_without_err' = main_without_err - 1 && PC2' = PC2 + 1 &&
        havoc(MF_b0_b_eq_0__0, MF_b0_b_eq_0__1, MI_b0_b_eq_0__0,  main_without_err, PC2) }

p11_0 -> si11_0 { res' = traverse_main_without_err_0() && havoc(res) }

si11_0 -> p9 { res = 1 && res' = 0 && cmain' = cmain + 1 && 
        havoc(res, cmain) }

p11 -> p11_1 {1 >= 1 &&
        MI_b0_b_eq_0__0' = MI_b0_b_eq_0__1 && MI_b0_b_eq_0__1' = MF_b0_b_eq_0__0' &&
	 MF_b0_b_eq_0__0' >= 0 && MF_b0_b_eq_0__0' <= 1 && 
        main_without_err' = main_without_err - 1 && cmain' = cmain + 1 &&
        havoc(MI_b0_b_eq_0__0, MI_b0_b_eq_0__1, MF_b0_b_eq_0__0,  main_without_err, cmain) }

p11_1 -> si11_1 { res' = traverse_main_without_err_0() &&  havoc(res) }

si11_1 -> p2 { res = 1 && res' = 0 && PC2' = PC2 + 1 &&
        havoc(res, PC2) }


}

//----------------------------------
// Grammar of cpost_f_with_err
// <END_l2_cpost_f_prime_END> -> 'e'
// <INIT_l1_cpost_f_prime_END> -> 'assert (F)'
// <INIT_l1_cpost_f_prime_END> -> 'assert (F)' <END_l2_cpost_f_prime_END>
// <cpost_f_with_err> -> 'assert(!b0_b_eq_0)' <INIT_l1_cpost_f_prime_END>
//----------------------------------
traverse_cpost_f_with_err_0 {
res: int;
out done: int;
initial p2;
final sf;



// <END_l2_cpost_f_prime_END> -> 'e'
p0 -> sf {  done' = 1 &&
       	MI_b0_b_eq_0__0 = MF_b0_b_eq_0__0 && 
       	havoc(done) }

// <INIT_l1_cpost_f_prime_END> -> 'assert (F)'
p1 -> sf { 1 = 1 &&  done' = 1 && MI_b0_b_eq_0__0 = MF_b0_b_eq_0__0 && 
        havoc(done) }

// <INIT_l1_cpost_f_prime_END> -> 'assert (F)' <END_l2_cpost_f_prime_END>
p1 -> p0 { 1 = 1 &&  
        havoc() }

// <cpost_f_with_err> -> 'assert(!b0_b_eq_0)' <INIT_l1_cpost_f_prime_END>
p2 -> p1 { MI_b0_b_eq_0__0 = 0 &&  
        havoc() }


}

//----------------------------------
// Grammar of cpost_f_with_err
// <END_l2_cpost_f_prime_END> -> 'e'
// <INIT_l1_cpost_f_prime_END> -> 'assert (F)'
// <INIT_l1_cpost_f_prime_END> -> 'assert (F)' <END_l2_cpost_f_prime_END>
// <cpost_f_with_err> -> 'assert(!b0_b_eq_0)' <INIT_l1_cpost_f_prime_END>
//----------------------------------
traverse_cpost_f_with_err_1 {
res: int;
out done: int;
initial p2;
final sf;



// <END_l2_cpost_f_prime_END> -> 'e'
p0 -> sf {  done' = 1 &&
       	MI_b0_b_eq_0__1 = MF_b0_b_eq_0__1 && 
       	havoc(done) }

// <INIT_l1_cpost_f_prime_END> -> 'assert (F)'
p1 -> sf { 1 = 1 &&  done' = 1 && MI_b0_b_eq_0__1 = MF_b0_b_eq_0__1 && 
        havoc(done) }

// <INIT_l1_cpost_f_prime_END> -> 'assert (F)' <END_l2_cpost_f_prime_END>
p1 -> p0 { 1 = 1 &&  
        havoc() }

// <cpost_f_with_err> -> 'assert(!b0_b_eq_0)' <INIT_l1_cpost_f_prime_END>
p2 -> p1 { MI_b0_b_eq_0__1 = 0 &&  
        havoc() }


}

//----------------------------------
// Grammar of cpost_f_without_err
// <PC11> -> 'b0_b_eq_0 := F' <PC12>
// <PC12> -> 'e'
// <cpost_f_without_err> -> 'assert(b0_b_eq_0)' <PC11>
//----------------------------------
traverse_cpost_f_without_err_0 {
res: int;
out done: int;
initial p2;
final sf;



// <PC11> -> 'b0_b_eq_0 := F' <PC12>
p0 -> p1 { MI_b0_b_eq_0__0' = 0 &&  
        havoc(MI_b0_b_eq_0__0) }

// <PC12> -> 'e'
p1 -> sf {  done' = 1 &&
       	MI_b0_b_eq_0__0 = MF_b0_b_eq_0__0 && 
       	havoc(done) }

// <cpost_f_without_err> -> 'assert(b0_b_eq_0)' <PC11>
p2 -> p0 { MI_b0_b_eq_0__0 = 1 &&  
        havoc() }


}

//----------------------------------
// Grammar of cpost_f_without_err
// <PC11> -> 'b0_b_eq_0 := F' <PC12>
// <PC12> -> 'e'
// <cpost_f_without_err> -> 'assert(b0_b_eq_0)' <PC11>
//----------------------------------
traverse_cpost_f_without_err_1 {
res: int;
out done: int;
initial p2;
final sf;



// <PC11> -> 'b0_b_eq_0 := F' <PC12>
p0 -> p1 { MI_b0_b_eq_0__1' = 0 &&  
        havoc(MI_b0_b_eq_0__1) }

// <PC12> -> 'e'
p1 -> sf {  done' = 1 &&
       	MI_b0_b_eq_0__1 = MF_b0_b_eq_0__1 && 
       	havoc(done) }

// <cpost_f_without_err> -> 'assert(b0_b_eq_0)' <PC11>
p2 -> p0 { MI_b0_b_eq_0__1 = 1 &&  
        havoc() }


}


