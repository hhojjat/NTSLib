/*
Licensed under the MIT License.
Copyright (C) 2012 EPFL (Switzerland) , Verimag (France), IMDEA Software (Spain).

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
nts pgm;

// Global Decls
main_without_err, PC2, cmain: int;
CNT_cpost_async1_pos, CNT_cpost_async1_neg: int;
MI_b0_x_ge_0__0, MI_b1_a_lt_0__0: int;
MF_b0_x_ge_0__0, MF_b1_a_lt_0__0: int;

MI_b0_x_ge_0__1, MI_b1_a_lt_0__1: int;
MF_b0_x_ge_0__1, MF_b1_a_lt_0__1: int;

main {
b0_x_ge_0, b1_a_lt_0, res: int;
nxt_b0_x_ge_0, nxt_b1_a_lt_0: int;
initial si;
final sf;
error se;

si -> s0 { b0_x_ge_0' >= 0 && b0_x_ge_0' <= 1 && b1_a_lt_0' >= 0 && b1_a_lt_0' <= 1 &&  main_without_err' = 0 && PC2' = 0 && cmain' = 0 && CNT_cpost_async1_pos' = 0 && CNT_cpost_async1_neg' = 0 && havoc(b0_x_ge_0, b1_a_lt_0, main_without_err, PC2, cmain, CNT_cpost_async1_pos, CNT_cpost_async1_neg)}
s0 -> s1 { main_without_err' = main_without_err + 1 &&
       MI_b0_x_ge_0__1' = b0_x_ge_0 && MF_b0_x_ge_0__1' = nxt_b0_x_ge_0' &&
	 nxt_b0_x_ge_0' >= 0 && nxt_b0_x_ge_0' <= 1 && MI_b1_a_lt_0__1' = b1_a_lt_0 && MF_b1_a_lt_0__1' = nxt_b1_a_lt_0' &&
	 nxt_b1_a_lt_0' >= 0 && nxt_b1_a_lt_0' <= 1 && 
       havoc (main_without_err, MI_b0_x_ge_0__1, MI_b1_a_lt_0__1, MF_b0_x_ge_0__1, MF_b1_a_lt_0__1, nxt_b0_x_ge_0, nxt_b1_a_lt_0) }
s1 -> s2_1 { res' = traverse_main_without_err_1() && havoc(res) }
s2_1 -> eventloop { res = 1 && res' = 0 && b0_x_ge_0' = nxt_b0_x_ge_0 && b1_a_lt_0' = nxt_b1_a_lt_0 &&  havoc(res, b0_x_ge_0, b1_a_lt_0) }

eventloop -> sf { CNT_cpost_async1_pos = 0 && CNT_cpost_async1_neg = 0 && havoc() }
eventloop -> s3 { CNT_cpost_async1_pos >= 1 && CNT_cpost_async1_pos' = CNT_cpost_async1_pos - 1 && havoc(CNT_cpost_async1_pos) }

s3 -> s4 { 
           MI_b0_x_ge_0__1' = b0_x_ge_0 && MF_b0_x_ge_0__1' = nxt_b0_x_ge_0' &&
	 nxt_b0_x_ge_0' >= 0 && nxt_b0_x_ge_0' <= 1 && MI_b1_a_lt_0__1' = b1_a_lt_0 && MF_b1_a_lt_0__1' = nxt_b1_a_lt_0' &&
	 nxt_b1_a_lt_0' >= 0 && nxt_b1_a_lt_0' <= 1 && 
           havoc( MI_b0_x_ge_0__1, MI_b1_a_lt_0__1, MF_b0_x_ge_0__1, MF_b1_a_lt_0__1, nxt_b0_x_ge_0, nxt_b1_a_lt_0) }

s4 -> se_4 { res' = traverse_cpost_async1_pos_with_err_1() && havoc(res) }
se_4 -> se { res = 1 && res' = 0 && b0_x_ge_0' = nxt_b0_x_ge_0 && b1_a_lt_0' = nxt_b1_a_lt_0 &&  havoc(res, b0_x_ge_0, b1_a_lt_0) }

s3 -> s5 { 
           MI_b0_x_ge_0__1' = b0_x_ge_0 && MF_b0_x_ge_0__1' = nxt_b0_x_ge_0' &&
	 nxt_b0_x_ge_0' >= 0 && nxt_b0_x_ge_0' <= 1 && MI_b1_a_lt_0__1' = b1_a_lt_0 && MF_b1_a_lt_0__1' = nxt_b1_a_lt_0' &&
	 nxt_b1_a_lt_0' >= 0 && nxt_b1_a_lt_0' <= 1 && 
           havoc( MI_b0_x_ge_0__1, MI_b1_a_lt_0__1, MF_b0_x_ge_0__1, MF_b1_a_lt_0__1, nxt_b0_x_ge_0, nxt_b1_a_lt_0) }

s5 -> s2_5 { res' = traverse_cpost_async1_pos_without_err_1() && havoc(res) }
s2_5 -> eventloop { b0_x_ge_0' = nxt_b0_x_ge_0 && b1_a_lt_0' = nxt_b1_a_lt_0 &&  havoc(b0_x_ge_0, b1_a_lt_0) }

eventloop -> s6 { CNT_cpost_async1_neg >= 1 && CNT_cpost_async1_neg' = CNT_cpost_async1_neg - 1 && havoc(CNT_cpost_async1_neg) }

s6 -> s7 { 
           MI_b0_x_ge_0__1' = b0_x_ge_0 && MF_b0_x_ge_0__1' = nxt_b0_x_ge_0' &&
	 nxt_b0_x_ge_0' >= 0 && nxt_b0_x_ge_0' <= 1 && MI_b1_a_lt_0__1' = b1_a_lt_0 && MF_b1_a_lt_0__1' = nxt_b1_a_lt_0' &&
	 nxt_b1_a_lt_0' >= 0 && nxt_b1_a_lt_0' <= 1 && 
           havoc( MI_b0_x_ge_0__1, MI_b1_a_lt_0__1, MF_b0_x_ge_0__1, MF_b1_a_lt_0__1, nxt_b0_x_ge_0, nxt_b1_a_lt_0) }

s7 -> se_7 { res' = traverse_cpost_async1_neg_with_err_1() && havoc(res) }
se_7 -> se { res = 1 && res' = 0 && b0_x_ge_0' = nxt_b0_x_ge_0 && b1_a_lt_0' = nxt_b1_a_lt_0 &&  havoc(res, b0_x_ge_0, b1_a_lt_0) }

s6 -> s8 { 
           MI_b0_x_ge_0__1' = b0_x_ge_0 && MF_b0_x_ge_0__1' = nxt_b0_x_ge_0' &&
	 nxt_b0_x_ge_0' >= 0 && nxt_b0_x_ge_0' <= 1 && MI_b1_a_lt_0__1' = b1_a_lt_0 && MF_b1_a_lt_0__1' = nxt_b1_a_lt_0' &&
	 nxt_b1_a_lt_0' >= 0 && nxt_b1_a_lt_0' <= 1 && 
           havoc( MI_b0_x_ge_0__1, MI_b1_a_lt_0__1, MF_b0_x_ge_0__1, MF_b1_a_lt_0__1, nxt_b0_x_ge_0, nxt_b1_a_lt_0) }

s8 -> s2_8 { res' = traverse_cpost_async1_neg_without_err_1() && havoc(res) }
s2_8 -> eventloop { b0_x_ge_0' = nxt_b0_x_ge_0 && b1_a_lt_0' = nxt_b1_a_lt_0 &&  havoc(b0_x_ge_0, b1_a_lt_0) }

}

//----------------------------------
// Grammar of main_without_err
// <PC2> -> 'e'
// <PC22> -> 'assert(!b0_x_ge_0)' <l2_cmain>
// <PC22> -> 'assert(b0_x_ge_0)' <PC23>
// <PC23> -> 'cpost_async1_pos' <PC24>
// <PC24> -> 'assert(!*)' <PC22>
// <PC24> -> 'assert(*)' <l4_cmain>
// <PC28> -> 'assert(!b0_x_ge_0)' <l5_cmain>
// <PC28> -> 'assert(b0_x_ge_0)' <PC29>
// <PC29> -> 'cpost_async1_pos' <PC30>
// <PC30> -> 'assert (T)' <PC33>
// <PC33> -> 'e'
// <cmain> -> 'b0_x_ge_0 := T' <l1_cmain>
// <l1_cmain> -> 'assert(!*)' <PC22>
// <l1_cmain> -> 'assert(*)' <l4_cmain>
// <l2_cmain> -> 'cpost_async1_neg' <l3_cmain>
// <l3_cmain> -> 'assert(!*)' <PC22>
// <l3_cmain> -> 'assert(*)' <l4_cmain>
// <l4_cmain> -> 'b0_x_ge_0 := T' <PC28>
// <l5_cmain> -> 'cpost_async1_neg' <l6_cmain>
// <l6_cmain> -> 'assert (T)' <PC33>
// <main_without_err> -> <cmain> <PC2>
//----------------------------------
traverse_main_without_err_0 {
res: int;
out done: int;
initial si;
final sf;

si -> p0 { PC2 >= 1 && havoc() }
si -> p8 { cmain >= 1 && havoc() }
si -> p15 { main_without_err >= 1 && havoc() }


// <PC2> -> 'e'
p0 -> sf { PC2' = PC2 - 1 && done' = 1 &&
       	MI_b0_x_ge_0__0 = MF_b0_x_ge_0__0 && MI_b1_a_lt_0__0 = MF_b1_a_lt_0__0 && 
       	havoc(PC2, done) }

// <PC22> -> 'assert(!b0_x_ge_0)' <l2_cmain>
p1 -> p10 { MI_b0_x_ge_0__0 = 0 &&  
        havoc() }

// <PC22> -> 'assert(b0_x_ge_0)' <PC23>
p1 -> p2 { MI_b0_x_ge_0__0 = 1 &&  
        havoc() }

// <PC23> -> 'cpost_async1_pos' <PC24>
p2 -> p3 { CNT_cpost_async1_pos' = CNT_cpost_async1_pos + 1  &&  
        havoc(CNT_cpost_async1_pos) }

// <PC24> -> 'assert(!*)' <PC22>
p3 -> p1 { 1 = 1 &&  
        havoc() }

// <PC24> -> 'assert(*)' <l4_cmain>
p3 -> p12 { 1 = 1 &&  
        havoc() }

// <PC28> -> 'assert(!b0_x_ge_0)' <l5_cmain>
p4 -> p13 { MI_b0_x_ge_0__0 = 0 &&  
        havoc() }

// <PC28> -> 'assert(b0_x_ge_0)' <PC29>
p4 -> p5 { MI_b0_x_ge_0__0 = 1 &&  
        havoc() }

// <PC29> -> 'cpost_async1_pos' <PC30>
p5 -> p6 { CNT_cpost_async1_pos' = CNT_cpost_async1_pos + 1  &&  
        havoc(CNT_cpost_async1_pos) }

// <PC30> -> 'assert (T)' <PC33>
p6 -> p7 { 1 = 1 &&  
        havoc() }

// <PC33> -> 'e'
p7 -> sf {  done' = 1 &&
       	MI_b0_x_ge_0__0 = MF_b0_x_ge_0__0 && MI_b1_a_lt_0__0 = MF_b1_a_lt_0__0 && 
       	havoc(done) }

// <cmain> -> 'b0_x_ge_0 := T' <l1_cmain>
p8 -> p9 { MI_b0_x_ge_0__0' = 1 && cmain' = cmain - 1 && 
        havoc(MI_b0_x_ge_0__0, cmain) }

// <l1_cmain> -> 'assert(!*)' <PC22>
p9 -> p1 { 1 = 1 &&  
        havoc() }

// <l1_cmain> -> 'assert(*)' <l4_cmain>
p9 -> p12 { 1 = 1 &&  
        havoc() }

// <l2_cmain> -> 'cpost_async1_neg' <l3_cmain>
p10 -> p11 { CNT_cpost_async1_neg' = CNT_cpost_async1_neg + 1  &&  
        havoc(CNT_cpost_async1_neg) }

// <l3_cmain> -> 'assert(!*)' <PC22>
p11 -> p1 { 1 = 1 &&  
        havoc() }

// <l3_cmain> -> 'assert(*)' <l4_cmain>
p11 -> p12 { 1 = 1 &&  
        havoc() }

// <l4_cmain> -> 'b0_x_ge_0 := T' <PC28>
p12 -> p4 { MI_b0_x_ge_0__0' = 1 &&  
        havoc(MI_b0_x_ge_0__0) }

// <l5_cmain> -> 'cpost_async1_neg' <l6_cmain>
p13 -> p14 { CNT_cpost_async1_neg' = CNT_cpost_async1_neg + 1  &&  
        havoc(CNT_cpost_async1_neg) }

// <l6_cmain> -> 'assert (T)' <PC33>
p14 -> p7 { 1 = 1 &&  
        havoc() }

// <main_without_err> -> <cmain> <PC2> 
p15 -> p15_0 {0 >= 1 &&
        MF_b0_x_ge_0__0' = MF_b0_x_ge_0__0 && MF_b0_x_ge_0__0' = MI_b0_x_ge_0__0' &&
	 MI_b0_x_ge_0__0' >= 0 && MI_b0_x_ge_0__0' <= 1 && MF_b1_a_lt_0__0' = MF_b1_a_lt_0__0 && MF_b1_a_lt_0__0' = MI_b1_a_lt_0__0' &&
	 MI_b1_a_lt_0__0' >= 0 && MI_b1_a_lt_0__0' <= 1 && 
        main_without_err' = main_without_err - 1 && PC2' = PC2 + 1 &&
        havoc(MF_b0_x_ge_0__0, MF_b1_a_lt_0__0, MF_b0_x_ge_0__0, MF_b1_a_lt_0__0, MI_b0_x_ge_0__0, MI_b1_a_lt_0__0,  main_without_err, PC2) }

p15_0 -> si15_0 { res' = 1 && havoc(res) }

si15_0 -> p8 { res = 1 && res' = 0 && cmain' = cmain + 1 && 
        havoc(res, cmain) }

p15 -> p15_1 {0 >= 1 &&
        MI_b0_x_ge_0__0' = MI_b0_x_ge_0__0 && MI_b0_x_ge_0__0' = MF_b0_x_ge_0__0' &&
	 MF_b0_x_ge_0__0' >= 0 && MF_b0_x_ge_0__0' <= 1 && MI_b1_a_lt_0__0' = MI_b1_a_lt_0__0 && MI_b1_a_lt_0__0' = MF_b1_a_lt_0__0' &&
	 MF_b1_a_lt_0__0' >= 0 && MF_b1_a_lt_0__0' <= 1 && 
        main_without_err' = main_without_err - 1 && cmain' = cmain + 1 &&
        havoc(MI_b0_x_ge_0__0, MI_b1_a_lt_0__0, MI_b0_x_ge_0__0, MI_b1_a_lt_0__0, MF_b0_x_ge_0__0, MF_b1_a_lt_0__0,  main_without_err, cmain) }

p15_1 -> si15_1 { res' = 1 &&  havoc(res) }

si15_1 -> p0 { res = 1 && res' = 0 && PC2' = PC2 + 1 &&
        havoc(res, PC2) }


}

//----------------------------------
// Grammar of main_without_err
// <PC2> -> 'e'
// <PC22> -> 'assert(!b0_x_ge_0)' <l2_cmain>
// <PC22> -> 'assert(b0_x_ge_0)' <PC23>
// <PC23> -> 'cpost_async1_pos' <PC24>
// <PC24> -> 'assert(!*)' <PC22>
// <PC24> -> 'assert(*)' <l4_cmain>
// <PC28> -> 'assert(!b0_x_ge_0)' <l5_cmain>
// <PC28> -> 'assert(b0_x_ge_0)' <PC29>
// <PC29> -> 'cpost_async1_pos' <PC30>
// <PC30> -> 'assert (T)' <PC33>
// <PC33> -> 'e'
// <cmain> -> 'b0_x_ge_0 := T' <l1_cmain>
// <l1_cmain> -> 'assert(!*)' <PC22>
// <l1_cmain> -> 'assert(*)' <l4_cmain>
// <l2_cmain> -> 'cpost_async1_neg' <l3_cmain>
// <l3_cmain> -> 'assert(!*)' <PC22>
// <l3_cmain> -> 'assert(*)' <l4_cmain>
// <l4_cmain> -> 'b0_x_ge_0 := T' <PC28>
// <l5_cmain> -> 'cpost_async1_neg' <l6_cmain>
// <l6_cmain> -> 'assert (T)' <PC33>
// <main_without_err> -> <cmain> <PC2>
//----------------------------------
traverse_main_without_err_1 {
res: int;
out done: int;
initial si;
final sf;

si -> p0 { PC2 >= 1 && havoc() }
si -> p8 { cmain >= 1 && havoc() }
si -> p15 { main_without_err >= 1 && havoc() }


// <PC2> -> 'e'
p0 -> sf { PC2' = PC2 - 1 && done' = 1 &&
       	MI_b0_x_ge_0__1 = MF_b0_x_ge_0__1 && MI_b1_a_lt_0__1 = MF_b1_a_lt_0__1 && 
       	havoc(PC2, done) }

// <PC22> -> 'assert(!b0_x_ge_0)' <l2_cmain>
p1 -> p10 { MI_b0_x_ge_0__1 = 0 &&  
        havoc() }

// <PC22> -> 'assert(b0_x_ge_0)' <PC23>
p1 -> p2 { MI_b0_x_ge_0__1 = 1 &&  
        havoc() }

// <PC23> -> 'cpost_async1_pos' <PC24>
p2 -> p3 { CNT_cpost_async1_pos' = CNT_cpost_async1_pos + 1  &&  
        havoc(CNT_cpost_async1_pos) }

// <PC24> -> 'assert(!*)' <PC22>
p3 -> p1 { 1 = 1 &&  
        havoc() }

// <PC24> -> 'assert(*)' <l4_cmain>
p3 -> p12 { 1 = 1 &&  
        havoc() }

// <PC28> -> 'assert(!b0_x_ge_0)' <l5_cmain>
p4 -> p13 { MI_b0_x_ge_0__1 = 0 &&  
        havoc() }

// <PC28> -> 'assert(b0_x_ge_0)' <PC29>
p4 -> p5 { MI_b0_x_ge_0__1 = 1 &&  
        havoc() }

// <PC29> -> 'cpost_async1_pos' <PC30>
p5 -> p6 { CNT_cpost_async1_pos' = CNT_cpost_async1_pos + 1  &&  
        havoc(CNT_cpost_async1_pos) }

// <PC30> -> 'assert (T)' <PC33>
p6 -> p7 { 1 = 1 &&  
        havoc() }

// <PC33> -> 'e'
p7 -> sf {  done' = 1 &&
       	MI_b0_x_ge_0__1 = MF_b0_x_ge_0__1 && MI_b1_a_lt_0__1 = MF_b1_a_lt_0__1 && 
       	havoc(done) }

// <cmain> -> 'b0_x_ge_0 := T' <l1_cmain>
p8 -> p9 { MI_b0_x_ge_0__1' = 1 && cmain' = cmain - 1 && 
        havoc(MI_b0_x_ge_0__1, cmain) }

// <l1_cmain> -> 'assert(!*)' <PC22>
p9 -> p1 { 1 = 1 &&  
        havoc() }

// <l1_cmain> -> 'assert(*)' <l4_cmain>
p9 -> p12 { 1 = 1 &&  
        havoc() }

// <l2_cmain> -> 'cpost_async1_neg' <l3_cmain>
p10 -> p11 { CNT_cpost_async1_neg' = CNT_cpost_async1_neg + 1  &&  
        havoc(CNT_cpost_async1_neg) }

// <l3_cmain> -> 'assert(!*)' <PC22>
p11 -> p1 { 1 = 1 &&  
        havoc() }

// <l3_cmain> -> 'assert(*)' <l4_cmain>
p11 -> p12 { 1 = 1 &&  
        havoc() }

// <l4_cmain> -> 'b0_x_ge_0 := T' <PC28>
p12 -> p4 { MI_b0_x_ge_0__1' = 1 &&  
        havoc(MI_b0_x_ge_0__1) }

// <l5_cmain> -> 'cpost_async1_neg' <l6_cmain>
p13 -> p14 { CNT_cpost_async1_neg' = CNT_cpost_async1_neg + 1  &&  
        havoc(CNT_cpost_async1_neg) }

// <l6_cmain> -> 'assert (T)' <PC33>
p14 -> p7 { 1 = 1 &&  
        havoc() }

// <main_without_err> -> <cmain> <PC2> 
p15 -> p15_0 {1 >= 1 &&
        MF_b0_x_ge_0__0' = MF_b0_x_ge_0__1 && MF_b0_x_ge_0__1' = MI_b0_x_ge_0__0' &&
	 MI_b0_x_ge_0__0' >= 0 && MI_b0_x_ge_0__0' <= 1 && MF_b1_a_lt_0__0' = MF_b1_a_lt_0__1 && MF_b1_a_lt_0__1' = MI_b1_a_lt_0__0' &&
	 MI_b1_a_lt_0__0' >= 0 && MI_b1_a_lt_0__0' <= 1 && 
        main_without_err' = main_without_err - 1 && PC2' = PC2 + 1 &&
        havoc(MF_b0_x_ge_0__0, MF_b1_a_lt_0__0, MF_b0_x_ge_0__1, MF_b1_a_lt_0__1, MI_b0_x_ge_0__0, MI_b1_a_lt_0__0,  main_without_err, PC2) }

p15_0 -> si15_0 { res' = traverse_main_without_err_0() && havoc(res) }

si15_0 -> p8 { res = 1 && res' = 0 && cmain' = cmain + 1 && 
        havoc(res, cmain) }

p15 -> p15_1 {1 >= 1 &&
        MI_b0_x_ge_0__0' = MI_b0_x_ge_0__1 && MI_b0_x_ge_0__1' = MF_b0_x_ge_0__0' &&
	 MF_b0_x_ge_0__0' >= 0 && MF_b0_x_ge_0__0' <= 1 && MI_b1_a_lt_0__0' = MI_b1_a_lt_0__1 && MI_b1_a_lt_0__1' = MF_b1_a_lt_0__0' &&
	 MF_b1_a_lt_0__0' >= 0 && MF_b1_a_lt_0__0' <= 1 && 
        main_without_err' = main_without_err - 1 && cmain' = cmain + 1 &&
        havoc(MI_b0_x_ge_0__0, MI_b1_a_lt_0__0, MI_b0_x_ge_0__1, MI_b1_a_lt_0__1, MF_b0_x_ge_0__0, MF_b1_a_lt_0__0,  main_without_err, cmain) }

p15_1 -> si15_1 { res' = traverse_main_without_err_0() &&  havoc(res) }

si15_1 -> p0 { res = 1 && res' = 0 && PC2' = PC2 + 1 &&
        havoc(res, PC2) }


}

//----------------------------------
// Grammar of cpost_async1_pos_with_err
// <END_l1_cpost_async1_pos_prime_END> -> 'e'
// <INIT_PC13_prime_END> -> 'assert(b1_a_lt_0)' <INIT_PC14_prime_END>
// <INIT_PC14_prime_END> -> 'assert (F)'
// <INIT_PC14_prime_END> -> 'assert (F)' <END_l1_cpost_async1_pos_prime_END>
// <cpost_async1_pos_with_err> -> 'b1_a_lt_0 := F' <INIT_PC13_prime_END>
//----------------------------------
traverse_cpost_async1_pos_with_err_0 {
res: int;
out done: int;
initial p3;
final sf;



// <END_l1_cpost_async1_pos_prime_END> -> 'e'
p0 -> sf {  done' = 1 &&
       	MI_b0_x_ge_0__0 = MF_b0_x_ge_0__0 && MI_b1_a_lt_0__0 = MF_b1_a_lt_0__0 && 
       	havoc(done) }

// <INIT_PC13_prime_END> -> 'assert(b1_a_lt_0)' <INIT_PC14_prime_END>
p1 -> p2 { MI_b1_a_lt_0__0 = 1 &&  
        havoc() }

// <INIT_PC14_prime_END> -> 'assert (F)'
p2 -> sf { 1 = 1 &&  done' = 1 && MI_b0_x_ge_0__0 = MF_b0_x_ge_0__0 && MI_b1_a_lt_0__0 = MF_b1_a_lt_0__0 && 
        havoc(done) }

// <INIT_PC14_prime_END> -> 'assert (F)' <END_l1_cpost_async1_pos_prime_END>
p2 -> p0 { 1 = 1 &&  
        havoc() }

// <cpost_async1_pos_with_err> -> 'b1_a_lt_0 := F' <INIT_PC13_prime_END>
p3 -> p1 { MI_b1_a_lt_0__0' = 0 &&  
        havoc(MI_b1_a_lt_0__0) }


}

//----------------------------------
// Grammar of cpost_async1_pos_with_err
// <END_l1_cpost_async1_pos_prime_END> -> 'e'
// <INIT_PC13_prime_END> -> 'assert(b1_a_lt_0)' <INIT_PC14_prime_END>
// <INIT_PC14_prime_END> -> 'assert (F)'
// <INIT_PC14_prime_END> -> 'assert (F)' <END_l1_cpost_async1_pos_prime_END>
// <cpost_async1_pos_with_err> -> 'b1_a_lt_0 := F' <INIT_PC13_prime_END>
//----------------------------------
traverse_cpost_async1_pos_with_err_1 {
res: int;
out done: int;
initial p3;
final sf;



// <END_l1_cpost_async1_pos_prime_END> -> 'e'
p0 -> sf {  done' = 1 &&
       	MI_b0_x_ge_0__1 = MF_b0_x_ge_0__1 && MI_b1_a_lt_0__1 = MF_b1_a_lt_0__1 && 
       	havoc(done) }

// <INIT_PC13_prime_END> -> 'assert(b1_a_lt_0)' <INIT_PC14_prime_END>
p1 -> p2 { MI_b1_a_lt_0__1 = 1 &&  
        havoc() }

// <INIT_PC14_prime_END> -> 'assert (F)'
p2 -> sf { 1 = 1 &&  done' = 1 && MI_b0_x_ge_0__1 = MF_b0_x_ge_0__1 && MI_b1_a_lt_0__1 = MF_b1_a_lt_0__1 && 
        havoc(done) }

// <INIT_PC14_prime_END> -> 'assert (F)' <END_l1_cpost_async1_pos_prime_END>
p2 -> p0 { 1 = 1 &&  
        havoc() }

// <cpost_async1_pos_with_err> -> 'b1_a_lt_0 := F' <INIT_PC13_prime_END>
p3 -> p1 { MI_b1_a_lt_0__1' = 0 &&  
        havoc(MI_b1_a_lt_0__1) }


}

//----------------------------------
// Grammar of cpost_async1_pos_without_err
// <PC13> -> 'assert(!b1_a_lt_0)' <l1_cpost_async1_pos>
// <cpost_async1_pos_without_err> -> 'b1_a_lt_0 := F' <PC13>
// <l1_cpost_async1_pos> -> 'e'
//----------------------------------
traverse_cpost_async1_pos_without_err_0 {
res: int;
out done: int;
initial p1;
final sf;



// <PC13> -> 'assert(!b1_a_lt_0)' <l1_cpost_async1_pos>
p0 -> p2 { MI_b1_a_lt_0__0 = 0 &&  
        havoc() }

// <cpost_async1_pos_without_err> -> 'b1_a_lt_0 := F' <PC13>
p1 -> p0 { MI_b1_a_lt_0__0' = 0 &&  
        havoc(MI_b1_a_lt_0__0) }

// <l1_cpost_async1_pos> -> 'e'
p2 -> sf {  done' = 1 &&
       	MI_b0_x_ge_0__0 = MF_b0_x_ge_0__0 && MI_b1_a_lt_0__0 = MF_b1_a_lt_0__0 && 
       	havoc(done) }


}

//----------------------------------
// Grammar of cpost_async1_pos_without_err
// <PC13> -> 'assert(!b1_a_lt_0)' <l1_cpost_async1_pos>
// <cpost_async1_pos_without_err> -> 'b1_a_lt_0 := F' <PC13>
// <l1_cpost_async1_pos> -> 'e'
//----------------------------------
traverse_cpost_async1_pos_without_err_1 {
res: int;
out done: int;
initial p1;
final sf;



// <PC13> -> 'assert(!b1_a_lt_0)' <l1_cpost_async1_pos>
p0 -> p2 { MI_b1_a_lt_0__1 = 0 &&  
        havoc() }

// <cpost_async1_pos_without_err> -> 'b1_a_lt_0 := F' <PC13>
p1 -> p0 { MI_b1_a_lt_0__1' = 0 &&  
        havoc(MI_b1_a_lt_0__1) }

// <l1_cpost_async1_pos> -> 'e'
p2 -> sf {  done' = 1 &&
       	MI_b0_x_ge_0__1 = MF_b0_x_ge_0__1 && MI_b1_a_lt_0__1 = MF_b1_a_lt_0__1 && 
       	havoc(done) }


}

//----------------------------------
// Grammar of cpost_async1_neg_with_err
// <END_l1_cpost_async1_neg_prime_END> -> 'e'
// <INIT_PC17_prime_END> -> 'assert(b1_a_lt_0)' <INIT_PC18_prime_END>
// <INIT_PC18_prime_END> -> 'assert (F)'
// <INIT_PC18_prime_END> -> 'assert (F)' <END_l1_cpost_async1_neg_prime_END>
// <cpost_async1_neg_with_err> -> 'b1_a_lt_0 := T' <INIT_PC17_prime_END>
//----------------------------------
traverse_cpost_async1_neg_with_err_0 {
res: int;
out done: int;
initial p3;
final sf;



// <END_l1_cpost_async1_neg_prime_END> -> 'e'
p0 -> sf {  done' = 1 &&
       	MI_b0_x_ge_0__0 = MF_b0_x_ge_0__0 && MI_b1_a_lt_0__0 = MF_b1_a_lt_0__0 && 
       	havoc(done) }

// <INIT_PC17_prime_END> -> 'assert(b1_a_lt_0)' <INIT_PC18_prime_END>
p1 -> p2 { MI_b1_a_lt_0__0 = 1 &&  
        havoc() }

// <INIT_PC18_prime_END> -> 'assert (F)'
p2 -> sf { 1 = 1 &&  done' = 1 && MI_b0_x_ge_0__0 = MF_b0_x_ge_0__0 && MI_b1_a_lt_0__0 = MF_b1_a_lt_0__0 && 
        havoc(done) }

// <INIT_PC18_prime_END> -> 'assert (F)' <END_l1_cpost_async1_neg_prime_END>
p2 -> p0 { 1 = 1 &&  
        havoc() }

// <cpost_async1_neg_with_err> -> 'b1_a_lt_0 := T' <INIT_PC17_prime_END>
p3 -> p1 { MI_b1_a_lt_0__0' = 1 &&  
        havoc(MI_b1_a_lt_0__0) }


}

//----------------------------------
// Grammar of cpost_async1_neg_with_err
// <END_l1_cpost_async1_neg_prime_END> -> 'e'
// <INIT_PC17_prime_END> -> 'assert(b1_a_lt_0)' <INIT_PC18_prime_END>
// <INIT_PC18_prime_END> -> 'assert (F)'
// <INIT_PC18_prime_END> -> 'assert (F)' <END_l1_cpost_async1_neg_prime_END>
// <cpost_async1_neg_with_err> -> 'b1_a_lt_0 := T' <INIT_PC17_prime_END>
//----------------------------------
traverse_cpost_async1_neg_with_err_1 {
res: int;
out done: int;
initial p3;
final sf;



// <END_l1_cpost_async1_neg_prime_END> -> 'e'
p0 -> sf {  done' = 1 &&
       	MI_b0_x_ge_0__1 = MF_b0_x_ge_0__1 && MI_b1_a_lt_0__1 = MF_b1_a_lt_0__1 && 
       	havoc(done) }

// <INIT_PC17_prime_END> -> 'assert(b1_a_lt_0)' <INIT_PC18_prime_END>
p1 -> p2 { MI_b1_a_lt_0__1 = 1 &&  
        havoc() }

// <INIT_PC18_prime_END> -> 'assert (F)'
p2 -> sf { 1 = 1 &&  done' = 1 && MI_b0_x_ge_0__1 = MF_b0_x_ge_0__1 && MI_b1_a_lt_0__1 = MF_b1_a_lt_0__1 && 
        havoc(done) }

// <INIT_PC18_prime_END> -> 'assert (F)' <END_l1_cpost_async1_neg_prime_END>
p2 -> p0 { 1 = 1 &&  
        havoc() }

// <cpost_async1_neg_with_err> -> 'b1_a_lt_0 := T' <INIT_PC17_prime_END>
p3 -> p1 { MI_b1_a_lt_0__1' = 1 &&  
        havoc(MI_b1_a_lt_0__1) }


}

//----------------------------------
// Grammar of cpost_async1_neg_without_err
// <PC17> -> 'assert(!b1_a_lt_0)' <l1_cpost_async1_neg>
// <cpost_async1_neg_without_err> -> 'b1_a_lt_0 := T' <PC17>
// <l1_cpost_async1_neg> -> 'e'
//----------------------------------
traverse_cpost_async1_neg_without_err_0 {
res: int;
out done: int;
initial p1;
final sf;



// <PC17> -> 'assert(!b1_a_lt_0)' <l1_cpost_async1_neg>
p0 -> p2 { MI_b1_a_lt_0__0 = 0 &&  
        havoc() }

// <cpost_async1_neg_without_err> -> 'b1_a_lt_0 := T' <PC17>
p1 -> p0 { MI_b1_a_lt_0__0' = 1 &&  
        havoc(MI_b1_a_lt_0__0) }

// <l1_cpost_async1_neg> -> 'e'
p2 -> sf {  done' = 1 &&
       	MI_b0_x_ge_0__0 = MF_b0_x_ge_0__0 && MI_b1_a_lt_0__0 = MF_b1_a_lt_0__0 && 
       	havoc(done) }


}

//----------------------------------
// Grammar of cpost_async1_neg_without_err
// <PC17> -> 'assert(!b1_a_lt_0)' <l1_cpost_async1_neg>
// <cpost_async1_neg_without_err> -> 'b1_a_lt_0 := T' <PC17>
// <l1_cpost_async1_neg> -> 'e'
//----------------------------------
traverse_cpost_async1_neg_without_err_1 {
res: int;
out done: int;
initial p1;
final sf;



// <PC17> -> 'assert(!b1_a_lt_0)' <l1_cpost_async1_neg>
p0 -> p2 { MI_b1_a_lt_0__1 = 0 &&  
        havoc() }

// <cpost_async1_neg_without_err> -> 'b1_a_lt_0 := T' <PC17>
p1 -> p0 { MI_b1_a_lt_0__1' = 1 &&  
        havoc(MI_b1_a_lt_0__1) }

// <l1_cpost_async1_neg> -> 'e'
p2 -> sf {  done' = 1 &&
       	MI_b0_x_ge_0__1 = MF_b0_x_ge_0__1 && MI_b1_a_lt_0__1 = MF_b1_a_lt_0__1 && 
       	havoc(done) }


}


