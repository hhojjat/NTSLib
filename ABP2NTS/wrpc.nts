/*
Licensed under the MIT License.
Copyright (C) 2012 EPFL (Switzerland) , Verimag (France), IMDEA Software (Spain).

Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the "Software"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/
nts pgm;

// Global Decls
main_without_err, PC2, cmain: int;
CNT_cpost_wrpc, CNT_cpost_rpccall: int;
MI_b0_sent_eq_recv__0, MI_b1_sent_plus_minusrecv_eq_1__0, MI_b2_sent_plus_minusrecv_eq_2__0: int;
MF_b0_sent_eq_recv__0, MF_b1_sent_plus_minusrecv_eq_1__0, MF_b2_sent_plus_minusrecv_eq_2__0: int;

MI_b0_sent_eq_recv__1, MI_b1_sent_plus_minusrecv_eq_1__1, MI_b2_sent_plus_minusrecv_eq_2__1: int;
MF_b0_sent_eq_recv__1, MF_b1_sent_plus_minusrecv_eq_1__1, MF_b2_sent_plus_minusrecv_eq_2__1: int;

main {
b0_sent_eq_recv, b1_sent_plus_minusrecv_eq_1, b2_sent_plus_minusrecv_eq_2, res: int;
nxt_b0_sent_eq_recv, nxt_b1_sent_plus_minusrecv_eq_1, nxt_b2_sent_plus_minusrecv_eq_2: int;
initial si;
final sf;
error se;

si -> s0 { b0_sent_eq_recv' >= 0 && b0_sent_eq_recv' <= 1 && b1_sent_plus_minusrecv_eq_1' >= 0 && b1_sent_plus_minusrecv_eq_1' <= 1 && b2_sent_plus_minusrecv_eq_2' >= 0 && b2_sent_plus_minusrecv_eq_2' <= 1 &&  main_without_err' = 0 && PC2' = 0 && cmain' = 0 && CNT_cpost_wrpc' = 0 && CNT_cpost_rpccall' = 0 && havoc(b0_sent_eq_recv, b1_sent_plus_minusrecv_eq_1, b2_sent_plus_minusrecv_eq_2, main_without_err, PC2, cmain, CNT_cpost_wrpc, CNT_cpost_rpccall)}
s0 -> s1 { main_without_err' = main_without_err + 1 &&
       MI_b0_sent_eq_recv__1' = b0_sent_eq_recv && MF_b0_sent_eq_recv__1' = nxt_b0_sent_eq_recv' &&
	 nxt_b0_sent_eq_recv' >= 0 && nxt_b0_sent_eq_recv' <= 1 && MI_b1_sent_plus_minusrecv_eq_1__1' = b1_sent_plus_minusrecv_eq_1 && MF_b1_sent_plus_minusrecv_eq_1__1' = nxt_b1_sent_plus_minusrecv_eq_1' &&
	 nxt_b1_sent_plus_minusrecv_eq_1' >= 0 && nxt_b1_sent_plus_minusrecv_eq_1' <= 1 && MI_b2_sent_plus_minusrecv_eq_2__1' = b2_sent_plus_minusrecv_eq_2 && MF_b2_sent_plus_minusrecv_eq_2__1' = nxt_b2_sent_plus_minusrecv_eq_2' &&
	 nxt_b2_sent_plus_minusrecv_eq_2' >= 0 && nxt_b2_sent_plus_minusrecv_eq_2' <= 1 && 
       havoc (main_without_err, MI_b0_sent_eq_recv__1, MI_b1_sent_plus_minusrecv_eq_1__1, MI_b2_sent_plus_minusrecv_eq_2__1, MF_b0_sent_eq_recv__1, MF_b1_sent_plus_minusrecv_eq_1__1, MF_b2_sent_plus_minusrecv_eq_2__1, nxt_b0_sent_eq_recv, nxt_b1_sent_plus_minusrecv_eq_1, nxt_b2_sent_plus_minusrecv_eq_2) }
s1 -> s2_1 { res' = traverse_main_without_err_1() && havoc(res) }
s2_1 -> eventloop { res = 1 && res' = 0 && b0_sent_eq_recv' = nxt_b0_sent_eq_recv && b1_sent_plus_minusrecv_eq_1' = nxt_b1_sent_plus_minusrecv_eq_1 && b2_sent_plus_minusrecv_eq_2' = nxt_b2_sent_plus_minusrecv_eq_2 &&  havoc(res, b0_sent_eq_recv, b1_sent_plus_minusrecv_eq_1, b2_sent_plus_minusrecv_eq_2) }

eventloop -> sf { CNT_cpost_wrpc = 0 && CNT_cpost_rpccall = 0 && havoc() }
eventloop -> s3 { CNT_cpost_wrpc >= 1 && CNT_cpost_wrpc' = CNT_cpost_wrpc - 1 && havoc(CNT_cpost_wrpc) }

s3 -> s4 { 
           MI_b0_sent_eq_recv__1' = b0_sent_eq_recv && MF_b0_sent_eq_recv__1' = nxt_b0_sent_eq_recv' &&
	 nxt_b0_sent_eq_recv' >= 0 && nxt_b0_sent_eq_recv' <= 1 && MI_b1_sent_plus_minusrecv_eq_1__1' = b1_sent_plus_minusrecv_eq_1 && MF_b1_sent_plus_minusrecv_eq_1__1' = nxt_b1_sent_plus_minusrecv_eq_1' &&
	 nxt_b1_sent_plus_minusrecv_eq_1' >= 0 && nxt_b1_sent_plus_minusrecv_eq_1' <= 1 && MI_b2_sent_plus_minusrecv_eq_2__1' = b2_sent_plus_minusrecv_eq_2 && MF_b2_sent_plus_minusrecv_eq_2__1' = nxt_b2_sent_plus_minusrecv_eq_2' &&
	 nxt_b2_sent_plus_minusrecv_eq_2' >= 0 && nxt_b2_sent_plus_minusrecv_eq_2' <= 1 && 
           havoc( MI_b0_sent_eq_recv__1, MI_b1_sent_plus_minusrecv_eq_1__1, MI_b2_sent_plus_minusrecv_eq_2__1, MF_b0_sent_eq_recv__1, MF_b1_sent_plus_minusrecv_eq_1__1, MF_b2_sent_plus_minusrecv_eq_2__1, nxt_b0_sent_eq_recv, nxt_b1_sent_plus_minusrecv_eq_1, nxt_b2_sent_plus_minusrecv_eq_2) }

s4 -> se_4 { res' = traverse_cpost_wrpc_with_err_1() && havoc(res) }
se_4 -> se { res = 1 && res' = 0 && b0_sent_eq_recv' = nxt_b0_sent_eq_recv && b1_sent_plus_minusrecv_eq_1' = nxt_b1_sent_plus_minusrecv_eq_1 && b2_sent_plus_minusrecv_eq_2' = nxt_b2_sent_plus_minusrecv_eq_2 &&  havoc(res, b0_sent_eq_recv, b1_sent_plus_minusrecv_eq_1, b2_sent_plus_minusrecv_eq_2) }

s3 -> s5 { 
           MI_b0_sent_eq_recv__1' = b0_sent_eq_recv && MF_b0_sent_eq_recv__1' = nxt_b0_sent_eq_recv' &&
	 nxt_b0_sent_eq_recv' >= 0 && nxt_b0_sent_eq_recv' <= 1 && MI_b1_sent_plus_minusrecv_eq_1__1' = b1_sent_plus_minusrecv_eq_1 && MF_b1_sent_plus_minusrecv_eq_1__1' = nxt_b1_sent_plus_minusrecv_eq_1' &&
	 nxt_b1_sent_plus_minusrecv_eq_1' >= 0 && nxt_b1_sent_plus_minusrecv_eq_1' <= 1 && MI_b2_sent_plus_minusrecv_eq_2__1' = b2_sent_plus_minusrecv_eq_2 && MF_b2_sent_plus_minusrecv_eq_2__1' = nxt_b2_sent_plus_minusrecv_eq_2' &&
	 nxt_b2_sent_plus_minusrecv_eq_2' >= 0 && nxt_b2_sent_plus_minusrecv_eq_2' <= 1 && 
           havoc( MI_b0_sent_eq_recv__1, MI_b1_sent_plus_minusrecv_eq_1__1, MI_b2_sent_plus_minusrecv_eq_2__1, MF_b0_sent_eq_recv__1, MF_b1_sent_plus_minusrecv_eq_1__1, MF_b2_sent_plus_minusrecv_eq_2__1, nxt_b0_sent_eq_recv, nxt_b1_sent_plus_minusrecv_eq_1, nxt_b2_sent_plus_minusrecv_eq_2) }

s5 -> s2_5 { res' = traverse_cpost_wrpc_without_err_1() && havoc(res) }
s2_5 -> eventloop { b0_sent_eq_recv' = nxt_b0_sent_eq_recv && b1_sent_plus_minusrecv_eq_1' = nxt_b1_sent_plus_minusrecv_eq_1 && b2_sent_plus_minusrecv_eq_2' = nxt_b2_sent_plus_minusrecv_eq_2 &&  havoc(b0_sent_eq_recv, b1_sent_plus_minusrecv_eq_1, b2_sent_plus_minusrecv_eq_2) }

eventloop -> s6 { CNT_cpost_rpccall >= 1 && CNT_cpost_rpccall' = CNT_cpost_rpccall - 1 && havoc(CNT_cpost_rpccall) }

s6 -> s8 { 
           MI_b0_sent_eq_recv__1' = b0_sent_eq_recv && MF_b0_sent_eq_recv__1' = nxt_b0_sent_eq_recv' &&
	 nxt_b0_sent_eq_recv' >= 0 && nxt_b0_sent_eq_recv' <= 1 && MI_b1_sent_plus_minusrecv_eq_1__1' = b1_sent_plus_minusrecv_eq_1 && MF_b1_sent_plus_minusrecv_eq_1__1' = nxt_b1_sent_plus_minusrecv_eq_1' &&
	 nxt_b1_sent_plus_minusrecv_eq_1' >= 0 && nxt_b1_sent_plus_minusrecv_eq_1' <= 1 && MI_b2_sent_plus_minusrecv_eq_2__1' = b2_sent_plus_minusrecv_eq_2 && MF_b2_sent_plus_minusrecv_eq_2__1' = nxt_b2_sent_plus_minusrecv_eq_2' &&
	 nxt_b2_sent_plus_minusrecv_eq_2' >= 0 && nxt_b2_sent_plus_minusrecv_eq_2' <= 1 && 
           havoc( MI_b0_sent_eq_recv__1, MI_b1_sent_plus_minusrecv_eq_1__1, MI_b2_sent_plus_minusrecv_eq_2__1, MF_b0_sent_eq_recv__1, MF_b1_sent_plus_minusrecv_eq_1__1, MF_b2_sent_plus_minusrecv_eq_2__1, nxt_b0_sent_eq_recv, nxt_b1_sent_plus_minusrecv_eq_1, nxt_b2_sent_plus_minusrecv_eq_2) }

s8 -> s2_8 { res' = traverse_cpost_rpccall_without_err_1() && havoc(res) }
s2_8 -> eventloop { b0_sent_eq_recv' = nxt_b0_sent_eq_recv && b1_sent_plus_minusrecv_eq_1' = nxt_b1_sent_plus_minusrecv_eq_1 && b2_sent_plus_minusrecv_eq_2' = nxt_b2_sent_plus_minusrecv_eq_2 &&  havoc(b0_sent_eq_recv, b1_sent_plus_minusrecv_eq_1, b2_sent_plus_minusrecv_eq_2) }

}

//----------------------------------
// Grammar of main_without_err
// <PC2> -> 'e'
// <PC26> -> 'assert (b0_sent_eq_recv)' <PC27>
// <PC27> -> 'e'
// <cmain> -> 'cpost_wrpc' <PC26>
// <main_without_err> -> <cmain> <PC2>
//----------------------------------
traverse_main_without_err_0 {
res: int;
out done: int;
initial si;
final sf;

si -> p0 { PC2 >= 1 && havoc() }
si -> p3 { cmain >= 1 && havoc() }
si -> p4 { main_without_err >= 1 && havoc() }


// <PC2> -> 'e'
p0 -> sf { PC2' = PC2 - 1 && done' = 1 &&
       	MI_b0_sent_eq_recv__0 = MF_b0_sent_eq_recv__0 && MI_b1_sent_plus_minusrecv_eq_1__0 = MF_b1_sent_plus_minusrecv_eq_1__0 && MI_b2_sent_plus_minusrecv_eq_2__0 = MF_b2_sent_plus_minusrecv_eq_2__0 && 
       	havoc(PC2, done) }

// <PC26> -> 'assert (b0_sent_eq_recv)' <PC27>
p1 -> p2 { MI_b0_sent_eq_recv__0 = 1 &&  
        havoc() }

// <PC27> -> 'e'
p2 -> sf {  done' = 1 &&
       	MI_b0_sent_eq_recv__0 = MF_b0_sent_eq_recv__0 && MI_b1_sent_plus_minusrecv_eq_1__0 = MF_b1_sent_plus_minusrecv_eq_1__0 && MI_b2_sent_plus_minusrecv_eq_2__0 = MF_b2_sent_plus_minusrecv_eq_2__0 && 
       	havoc(done) }

// <cmain> -> 'cpost_wrpc' <PC26>
p3 -> p1 { CNT_cpost_wrpc' = CNT_cpost_wrpc + 1  && cmain' = cmain - 1 && 
        havoc(CNT_cpost_wrpc, cmain) }

// <main_without_err> -> <cmain> <PC2> 
p4 -> p4_0 {0 >= 1 &&
        MF_b0_sent_eq_recv__0' = MF_b0_sent_eq_recv__0 && MF_b0_sent_eq_recv__0' = MI_b0_sent_eq_recv__0' &&
	 MI_b0_sent_eq_recv__0' >= 0 && MI_b0_sent_eq_recv__0' <= 1 && MF_b1_sent_plus_minusrecv_eq_1__0' = MF_b1_sent_plus_minusrecv_eq_1__0 && MF_b1_sent_plus_minusrecv_eq_1__0' = MI_b1_sent_plus_minusrecv_eq_1__0' &&
	 MI_b1_sent_plus_minusrecv_eq_1__0' >= 0 && MI_b1_sent_plus_minusrecv_eq_1__0' <= 1 && MF_b2_sent_plus_minusrecv_eq_2__0' = MF_b2_sent_plus_minusrecv_eq_2__0 && MF_b2_sent_plus_minusrecv_eq_2__0' = MI_b2_sent_plus_minusrecv_eq_2__0' &&
	 MI_b2_sent_plus_minusrecv_eq_2__0' >= 0 && MI_b2_sent_plus_minusrecv_eq_2__0' <= 1 && 
        main_without_err' = main_without_err - 1 && PC2' = PC2 + 1 &&
        havoc(MF_b0_sent_eq_recv__0, MF_b1_sent_plus_minusrecv_eq_1__0, MF_b2_sent_plus_minusrecv_eq_2__0, MF_b0_sent_eq_recv__0, MF_b1_sent_plus_minusrecv_eq_1__0, MF_b2_sent_plus_minusrecv_eq_2__0, MI_b0_sent_eq_recv__0, MI_b1_sent_plus_minusrecv_eq_1__0, MI_b2_sent_plus_minusrecv_eq_2__0,  main_without_err, PC2) }

p4_0 -> si4_0 { res' = 1 && havoc(res) }

si4_0 -> p3 { res = 1 && res' = 0 && cmain' = cmain + 1 && 
        havoc(res, cmain) }

p4 -> p4_1 {0 >= 1 &&
        MI_b0_sent_eq_recv__0' = MI_b0_sent_eq_recv__0 && MI_b0_sent_eq_recv__0' = MF_b0_sent_eq_recv__0' &&
	 MF_b0_sent_eq_recv__0' >= 0 && MF_b0_sent_eq_recv__0' <= 1 && MI_b1_sent_plus_minusrecv_eq_1__0' = MI_b1_sent_plus_minusrecv_eq_1__0 && MI_b1_sent_plus_minusrecv_eq_1__0' = MF_b1_sent_plus_minusrecv_eq_1__0' &&
	 MF_b1_sent_plus_minusrecv_eq_1__0' >= 0 && MF_b1_sent_plus_minusrecv_eq_1__0' <= 1 && MI_b2_sent_plus_minusrecv_eq_2__0' = MI_b2_sent_plus_minusrecv_eq_2__0 && MI_b2_sent_plus_minusrecv_eq_2__0' = MF_b2_sent_plus_minusrecv_eq_2__0' &&
	 MF_b2_sent_plus_minusrecv_eq_2__0' >= 0 && MF_b2_sent_plus_minusrecv_eq_2__0' <= 1 && 
        main_without_err' = main_without_err - 1 && cmain' = cmain + 1 &&
        havoc(MI_b0_sent_eq_recv__0, MI_b1_sent_plus_minusrecv_eq_1__0, MI_b2_sent_plus_minusrecv_eq_2__0, MI_b0_sent_eq_recv__0, MI_b1_sent_plus_minusrecv_eq_1__0, MI_b2_sent_plus_minusrecv_eq_2__0, MF_b0_sent_eq_recv__0, MF_b1_sent_plus_minusrecv_eq_1__0, MF_b2_sent_plus_minusrecv_eq_2__0,  main_without_err, cmain) }

p4_1 -> si4_1 { res' = 1 &&  havoc(res) }

si4_1 -> p0 { res = 1 && res' = 0 && PC2' = PC2 + 1 &&
        havoc(res, PC2) }


}

//----------------------------------
// Grammar of main_without_err
// <PC2> -> 'e'
// <PC26> -> 'assert (b0_sent_eq_recv)' <PC27>
// <PC27> -> 'e'
// <cmain> -> 'cpost_wrpc' <PC26>
// <main_without_err> -> <cmain> <PC2>
//----------------------------------
traverse_main_without_err_1 {
res: int;
out done: int;
initial si;
final sf;

si -> p0 { PC2 >= 1 && havoc() }
si -> p3 { cmain >= 1 && havoc() }
si -> p4 { main_without_err >= 1 && havoc() }


// <PC2> -> 'e'
p0 -> sf { PC2' = PC2 - 1 && done' = 1 &&
       	MI_b0_sent_eq_recv__1 = MF_b0_sent_eq_recv__1 && MI_b1_sent_plus_minusrecv_eq_1__1 = MF_b1_sent_plus_minusrecv_eq_1__1 && MI_b2_sent_plus_minusrecv_eq_2__1 = MF_b2_sent_plus_minusrecv_eq_2__1 && 
       	havoc(PC2, done) }

// <PC26> -> 'assert (b0_sent_eq_recv)' <PC27>
p1 -> p2 { MI_b0_sent_eq_recv__1 = 1 &&  
        havoc() }

// <PC27> -> 'e'
p2 -> sf {  done' = 1 &&
       	MI_b0_sent_eq_recv__1 = MF_b0_sent_eq_recv__1 && MI_b1_sent_plus_minusrecv_eq_1__1 = MF_b1_sent_plus_minusrecv_eq_1__1 && MI_b2_sent_plus_minusrecv_eq_2__1 = MF_b2_sent_plus_minusrecv_eq_2__1 && 
       	havoc(done) }

// <cmain> -> 'cpost_wrpc' <PC26>
p3 -> p1 { CNT_cpost_wrpc' = CNT_cpost_wrpc + 1  && cmain' = cmain - 1 && 
        havoc(CNT_cpost_wrpc, cmain) }

// <main_without_err> -> <cmain> <PC2> 
p4 -> p4_0 {1 >= 1 &&
        MF_b0_sent_eq_recv__0' = MF_b0_sent_eq_recv__1 && MF_b0_sent_eq_recv__1' = MI_b0_sent_eq_recv__0' &&
	 MI_b0_sent_eq_recv__0' >= 0 && MI_b0_sent_eq_recv__0' <= 1 && MF_b1_sent_plus_minusrecv_eq_1__0' = MF_b1_sent_plus_minusrecv_eq_1__1 && MF_b1_sent_plus_minusrecv_eq_1__1' = MI_b1_sent_plus_minusrecv_eq_1__0' &&
	 MI_b1_sent_plus_minusrecv_eq_1__0' >= 0 && MI_b1_sent_plus_minusrecv_eq_1__0' <= 1 && MF_b2_sent_plus_minusrecv_eq_2__0' = MF_b2_sent_plus_minusrecv_eq_2__1 && MF_b2_sent_plus_minusrecv_eq_2__1' = MI_b2_sent_plus_minusrecv_eq_2__0' &&
	 MI_b2_sent_plus_minusrecv_eq_2__0' >= 0 && MI_b2_sent_plus_minusrecv_eq_2__0' <= 1 && 
        main_without_err' = main_without_err - 1 && PC2' = PC2 + 1 &&
        havoc(MF_b0_sent_eq_recv__0, MF_b1_sent_plus_minusrecv_eq_1__0, MF_b2_sent_plus_minusrecv_eq_2__0, MF_b0_sent_eq_recv__1, MF_b1_sent_plus_minusrecv_eq_1__1, MF_b2_sent_plus_minusrecv_eq_2__1, MI_b0_sent_eq_recv__0, MI_b1_sent_plus_minusrecv_eq_1__0, MI_b2_sent_plus_minusrecv_eq_2__0,  main_without_err, PC2) }

p4_0 -> si4_0 { res' = traverse_main_without_err_0() && havoc(res) }

si4_0 -> p3 { res = 1 && res' = 0 && cmain' = cmain + 1 && 
        havoc(res, cmain) }

p4 -> p4_1 {1 >= 1 &&
        MI_b0_sent_eq_recv__0' = MI_b0_sent_eq_recv__1 && MI_b0_sent_eq_recv__1' = MF_b0_sent_eq_recv__0' &&
	 MF_b0_sent_eq_recv__0' >= 0 && MF_b0_sent_eq_recv__0' <= 1 && MI_b1_sent_plus_minusrecv_eq_1__0' = MI_b1_sent_plus_minusrecv_eq_1__1 && MI_b1_sent_plus_minusrecv_eq_1__1' = MF_b1_sent_plus_minusrecv_eq_1__0' &&
	 MF_b1_sent_plus_minusrecv_eq_1__0' >= 0 && MF_b1_sent_plus_minusrecv_eq_1__0' <= 1 && MI_b2_sent_plus_minusrecv_eq_2__0' = MI_b2_sent_plus_minusrecv_eq_2__1 && MI_b2_sent_plus_minusrecv_eq_2__1' = MF_b2_sent_plus_minusrecv_eq_2__0' &&
	 MF_b2_sent_plus_minusrecv_eq_2__0' >= 0 && MF_b2_sent_plus_minusrecv_eq_2__0' <= 1 && 
        main_without_err' = main_without_err - 1 && cmain' = cmain + 1 &&
        havoc(MI_b0_sent_eq_recv__0, MI_b1_sent_plus_minusrecv_eq_1__0, MI_b2_sent_plus_minusrecv_eq_2__0, MI_b0_sent_eq_recv__1, MI_b1_sent_plus_minusrecv_eq_1__1, MI_b2_sent_plus_minusrecv_eq_2__1, MF_b0_sent_eq_recv__0, MF_b1_sent_plus_minusrecv_eq_1__0, MF_b2_sent_plus_minusrecv_eq_2__0,  main_without_err, cmain) }

p4_1 -> si4_1 { res' = traverse_main_without_err_0() &&  havoc(res) }

si4_1 -> p0 { res = 1 && res' = 0 && PC2' = PC2 + 1 &&
        havoc(res, PC2) }


}

//----------------------------------
// Grammar of cpost_wrpc_with_err
// <END_l1_prime_END> -> 'e'
// <INIT_PC13_prime_END> -> 'assert (F)'
// <INIT_PC13_prime_END> -> 'assert (F)' <END_l1_prime_END>
// <cpost_wrpc_with_err> -> 'assert(!*)' <INIT_PC13_prime_END>
//----------------------------------
traverse_cpost_wrpc_with_err_0 {
res: int;
out done: int;
initial p2;
final sf;



// <END_l1_prime_END> -> 'e'
p0 -> sf {  done' = 1 &&
       	MI_b0_sent_eq_recv__0 = MF_b0_sent_eq_recv__0 && MI_b1_sent_plus_minusrecv_eq_1__0 = MF_b1_sent_plus_minusrecv_eq_1__0 && MI_b2_sent_plus_minusrecv_eq_2__0 = MF_b2_sent_plus_minusrecv_eq_2__0 && 
       	havoc(done) }

// <INIT_PC13_prime_END> -> 'assert (F)'
p1 -> sf { 1 = 1 &&  done' = 1 && MI_b0_sent_eq_recv__0 = MF_b0_sent_eq_recv__0 && MI_b1_sent_plus_minusrecv_eq_1__0 = MF_b1_sent_plus_minusrecv_eq_1__0 && MI_b2_sent_plus_minusrecv_eq_2__0 = MF_b2_sent_plus_minusrecv_eq_2__0 && 
        havoc(done) }

// <INIT_PC13_prime_END> -> 'assert (F)' <END_l1_prime_END>
p1 -> p0 { 1 = 1 &&  
        havoc() }

// <cpost_wrpc_with_err> -> 'assert(!*)' <INIT_PC13_prime_END>
p2 -> p1 { 1 = 1 &&  
        havoc() }


}

//----------------------------------
// Grammar of cpost_wrpc_with_err
// <END_l1_prime_END> -> 'e'
// <INIT_PC13_prime_END> -> 'assert (F)'
// <INIT_PC13_prime_END> -> 'assert (F)' <END_l1_prime_END>
// <cpost_wrpc_with_err> -> 'assert(!*)' <INIT_PC13_prime_END>
//----------------------------------
traverse_cpost_wrpc_with_err_1 {
res: int;
out done: int;
initial p2;
final sf;



// <END_l1_prime_END> -> 'e'
p0 -> sf {  done' = 1 &&
       	MI_b0_sent_eq_recv__1 = MF_b0_sent_eq_recv__1 && MI_b1_sent_plus_minusrecv_eq_1__1 = MF_b1_sent_plus_minusrecv_eq_1__1 && MI_b2_sent_plus_minusrecv_eq_2__1 = MF_b2_sent_plus_minusrecv_eq_2__1 && 
       	havoc(done) }

// <INIT_PC13_prime_END> -> 'assert (F)'
p1 -> sf { 1 = 1 &&  done' = 1 && MI_b0_sent_eq_recv__1 = MF_b0_sent_eq_recv__1 && MI_b1_sent_plus_minusrecv_eq_1__1 = MF_b1_sent_plus_minusrecv_eq_1__1 && MI_b2_sent_plus_minusrecv_eq_2__1 = MF_b2_sent_plus_minusrecv_eq_2__1 && 
        havoc(done) }

// <INIT_PC13_prime_END> -> 'assert (F)' <END_l1_prime_END>
p1 -> p0 { 1 = 1 &&  
        havoc() }

// <cpost_wrpc_with_err> -> 'assert(!*)' <INIT_PC13_prime_END>
p2 -> p1 { 1 = 1 &&  
        havoc() }


}

//----------------------------------
// Grammar of cpost_wrpc_without_err
// <PC15> -> 'assert(!*)' <PC16>
// <PC15> -> 'assert(*)' <l2>
// <PC16> -> 'assert(!*)' <PC17>
// <PC16> -> 'assert(*)' <l2>
// <PC17> -> 'cpost_rpccall' <PC18>
// <PC18> -> 'b0_sent_eq_recv := (!((b1_sent_plus_minusrecv_eq_1 | b2_sent_plus_minusrecv_eq_2) | b0_sent_eq_recv))' <PC18_1>
// <PC18_1> -> 'b1_sent_plus_minusrecv_eq_1 := b0_sent_eq_recv' <PC18_2>
// <PC18_2> -> 'b2_sent_plus_minusrecv_eq_2 := b1_sent_plus_minusrecv_eq_1' <l2>
// <PC20> -> 'e'
// <cpost_wrpc_without_err> -> 'assert(*)' <l1>
// <l1> -> 'assert(!*)' <PC15>
// <l1> -> 'assert(*)' <l3>
// <l2> -> 'cpost_wrpc' <PC20>
// <l3> -> 'e'
//----------------------------------
traverse_cpost_wrpc_without_err_0 {
res: int;
out done: int;
initial p7;
final sf;



// <PC15> -> 'assert(!*)' <PC16>
p0 -> p1 { 1 = 1 &&  
        havoc() }

// <PC15> -> 'assert(*)' <l2>
p0 -> p9 { 1 = 1 &&  
        havoc() }

// <PC16> -> 'assert(!*)' <PC17>
p1 -> p2 { 1 = 1 &&  
        havoc() }

// <PC16> -> 'assert(*)' <l2>
p1 -> p9 { 1 = 1 &&  
        havoc() }

// <PC17> -> 'cpost_rpccall' <PC18>
p2 -> p3 { CNT_cpost_rpccall' = CNT_cpost_rpccall + 1  &&  
        havoc(CNT_cpost_rpccall) }

// <PC18> -> 'b0_sent_eq_recv := (!((b1_sent_plus_minusrecv_eq_1 | b2_sent_plus_minusrecv_eq_2) | b0_sent_eq_recv))' <PC18_1>
//BOOL VERSION p3 -> p4 { MI_b0_sent_eq_recv__0' = (!((b1_sent_plus_minusrecv_eq_1 | b2_sent_plus_minusrecv_eq_2) | b0_sent_eq_recv)) && havoc(MI_b0_sent_eq_recv__0) }
p3 -> p3p4True { MI_b0_sent_eq_recv__0' = (1 - MI_b1_sent_plus_minusrecv_eq_1__0) + (1 - 
	MI_b2_sent_plus_minusrecv_eq_2__0) + (1 - MI_b0_sent_eq_recv__0) &&
        havoc(MI_b0_sent_eq_recv__0) } 
p3p4True -> p4 { MI_b0_sent_eq_recv__0 >= 3 && MI_b0_sent_eq_recv__0' = 1 && havoc(MI_b0_sent_eq_recv__0) }
p3p4True -> p4 { MI_b0_sent_eq_recv__0 < 3 && MI_b0_sent_eq_recv__0' = 0 && havoc(MI_b0_sent_eq_recv__0) }


// <PC18_1> -> 'b1_sent_plus_minusrecv_eq_1 := b0_sent_eq_recv' <PC18_2>
p4 -> p5 { MI_b1_sent_plus_minusrecv_eq_1__0' = MI_b0_sent_eq_recv__0 &&  
        havoc(MI_b1_sent_plus_minusrecv_eq_1__0) }

// <PC18_2> -> 'b2_sent_plus_minusrecv_eq_2 := b1_sent_plus_minusrecv_eq_1' <l2>
p5 -> p9 { MI_b2_sent_plus_minusrecv_eq_2__0' = MI_b1_sent_plus_minusrecv_eq_1__0 &&  
        havoc(MI_b2_sent_plus_minusrecv_eq_2__0) }

// <PC20> -> 'e'
p6 -> sf {  done' = 1 &&
       	MI_b0_sent_eq_recv__0 = MF_b0_sent_eq_recv__0 && MI_b1_sent_plus_minusrecv_eq_1__0 = MF_b1_sent_plus_minusrecv_eq_1__0 && MI_b2_sent_plus_minusrecv_eq_2__0 = MF_b2_sent_plus_minusrecv_eq_2__0 && 
       	havoc(done) }

// <cpost_wrpc_without_err> -> 'assert(*)' <l1>
p7 -> p8 { 1 = 1 &&  
        havoc() }

// <l1> -> 'assert(!*)' <PC15>
p8 -> p0 { 1 = 1 &&  
        havoc() }

// <l1> -> 'assert(*)' <l3>
p8 -> p10 { 1 = 1 &&  
        havoc() }

// <l2> -> 'cpost_wrpc' <PC20>
p9 -> p6 { CNT_cpost_wrpc' = CNT_cpost_wrpc + 1  &&  
        havoc(CNT_cpost_wrpc) }

// <l3> -> 'e'
p10 -> sf {  done' = 1 &&
       	MI_b0_sent_eq_recv__0 = MF_b0_sent_eq_recv__0 && MI_b1_sent_plus_minusrecv_eq_1__0 = MF_b1_sent_plus_minusrecv_eq_1__0 && MI_b2_sent_plus_minusrecv_eq_2__0 = MF_b2_sent_plus_minusrecv_eq_2__0 && 
       	havoc(done) }


}

//----------------------------------
// Grammar of cpost_wrpc_without_err
// <PC15> -> 'assert(!*)' <PC16>
// <PC15> -> 'assert(*)' <l2>
// <PC16> -> 'assert(!*)' <PC17>
// <PC16> -> 'assert(*)' <l2>
// <PC17> -> 'cpost_rpccall' <PC18>
// <PC18> -> 'b0_sent_eq_recv := (!((b1_sent_plus_minusrecv_eq_1 | b2_sent_plus_minusrecv_eq_2) | b0_sent_eq_recv))' <PC18_1>
// <PC18_1> -> 'b1_sent_plus_minusrecv_eq_1 := b0_sent_eq_recv' <PC18_2>
// <PC18_2> -> 'b2_sent_plus_minusrecv_eq_2 := b1_sent_plus_minusrecv_eq_1' <l2>
// <PC20> -> 'e'
// <cpost_wrpc_without_err> -> 'assert(*)' <l1>
// <l1> -> 'assert(!*)' <PC15>
// <l1> -> 'assert(*)' <l3>
// <l2> -> 'cpost_wrpc' <PC20>
// <l3> -> 'e'
//----------------------------------
traverse_cpost_wrpc_without_err_1 {
res: int;
out done: int;
initial p7;
final sf;



// <PC15> -> 'assert(!*)' <PC16>
p0 -> p1 { 1 = 1 &&  
        havoc() }

// <PC15> -> 'assert(*)' <l2>
p0 -> p9 { 1 = 1 &&  
        havoc() }

// <PC16> -> 'assert(!*)' <PC17>
p1 -> p2 { 1 = 1 &&  
        havoc() }

// <PC16> -> 'assert(*)' <l2>
p1 -> p9 { 1 = 1 &&  
        havoc() }

// <PC17> -> 'cpost_rpccall' <PC18>
p2 -> p3 { CNT_cpost_rpccall' = CNT_cpost_rpccall + 1  &&  
        havoc(CNT_cpost_rpccall) }

// <PC18> -> 'b0_sent_eq_recv := (!((b1_sent_plus_minusrecv_eq_1 | b2_sent_plus_minusrecv_eq_2) | b0_sent_eq_recv))' <PC18_1>
//BOOL VERSION p3 -> p4 { MI_b0_sent_eq_recv__1' = (!((b1_sent_plus_minusrecv_eq_1 | b2_sent_plus_minusrecv_eq_2) | b0_sent_eq_recv)) && havoc(MI_b0_sent_eq_recv__1) }
p3 -> p3p4True { MI_b0_sent_eq_recv__1' = (1 - MI_b1_sent_plus_minusrecv_eq_1__1) + (1 - 
	MI_b2_sent_plus_minusrecv_eq_2__1) + (1 - MI_b0_sent_eq_recv__1) &&
        havoc(MI_b0_sent_eq_recv__1) } 
p3p4True -> p4 { MI_b0_sent_eq_recv__1 >= 3 && MI_b0_sent_eq_recv__1' = 1 && havoc(MI_b0_sent_eq_recv__1) }
p3p4True -> p4 { MI_b0_sent_eq_recv__1 < 3 && MI_b0_sent_eq_recv__1' = 0 && havoc(MI_b0_sent_eq_recv__1) }

// <PC18_1> -> 'b1_sent_plus_minusrecv_eq_1 := b0_sent_eq_recv' <PC18_2>
p4 -> p5 { MI_b1_sent_plus_minusrecv_eq_1__1' = MI_b0_sent_eq_recv__1 &&  
        havoc(MI_b1_sent_plus_minusrecv_eq_1__1) }

// <PC18_2> -> 'b2_sent_plus_minusrecv_eq_2 := b1_sent_plus_minusrecv_eq_1' <l2>
p5 -> p9 { MI_b2_sent_plus_minusrecv_eq_2__1' = MI_b1_sent_plus_minusrecv_eq_1__1 &&  
        havoc(MI_b2_sent_plus_minusrecv_eq_2__1) }

// <PC20> -> 'e'
p6 -> sf {  done' = 1 &&
       	MI_b0_sent_eq_recv__1 = MF_b0_sent_eq_recv__1 && MI_b1_sent_plus_minusrecv_eq_1__1 = MF_b1_sent_plus_minusrecv_eq_1__1 && MI_b2_sent_plus_minusrecv_eq_2__1 = MF_b2_sent_plus_minusrecv_eq_2__1 && 
       	havoc(done) }

// <cpost_wrpc_without_err> -> 'assert(*)' <l1>
p7 -> p8 { 1 = 1 &&  
        havoc() }

// <l1> -> 'assert(!*)' <PC15>
p8 -> p0 { 1 = 1 &&  
        havoc() }

// <l1> -> 'assert(*)' <l3>
p8 -> p10 { 1 = 1 &&  
        havoc() }

// <l2> -> 'cpost_wrpc' <PC20>
p9 -> p6 { CNT_cpost_wrpc' = CNT_cpost_wrpc + 1  &&  
        havoc(CNT_cpost_wrpc) }

// <l3> -> 'e'
p10 -> sf {  done' = 1 &&
       	MI_b0_sent_eq_recv__1 = MF_b0_sent_eq_recv__1 && MI_b1_sent_plus_minusrecv_eq_1__1 = MF_b1_sent_plus_minusrecv_eq_1__1 && MI_b2_sent_plus_minusrecv_eq_2__1 = MF_b2_sent_plus_minusrecv_eq_2__1 && 
       	havoc(done) }


}

//----------------------------------
// Grammar of cpost_rpccall_without_err
// <PC23_1> -> 'b1_sent_plus_minusrecv_eq_1 := (b2_sent_plus_minusrecv_eq_2 | (!((b1_sent_plus_minusrecv_eq_1 | b0_sent_eq_recv) | (!b2_sent_plus_minusrecv_eq_2))))' <PC23_2>
// <PC23_2> -> 'b2_sent_plus_minusrecv_eq_2 := (!((b1_sent_plus_minusrecv_eq_1 | b2_sent_plus_minusrecv_eq_2) | b0_sent_eq_recv))' <PC24>
// <PC24> -> 'e'
// <cpost_rpccall_without_err> -> 'b0_sent_eq_recv := (b1_sent_plus_minusrecv_eq_1 | (!((b2_sent_plus_minusrecv_eq_2 | b0_sent_eq_recv) | (!b1_sent_plus_minusrecv_eq_1))))' <PC23_1>
//----------------------------------
traverse_cpost_rpccall_without_err_0 {
res: int;
out done: int;
initial p3;
final sf;



// <PC23_1> -> 'b1_sent_plus_minusrecv_eq_1 := (b2_sent_plus_minusrecv_eq_2 | (!((b1_sent_plus_minusrecv_eq_1 | b0_sent_eq_recv) | (!b2_sent_plus_minusrecv_eq_2))))' <PC23_2>
//BOOL VERSION p0 -> p1 { MI_b1_sent_plus_minusrecv_eq_1__0' = (b2_sent_plus_minusrecv_eq_2 | (!((b1_sent_plus_minusrecv_eq_1 | b0_sent_eq_recv) | 1 - MI_b2_sent_plus_minusrecv_eq_2__0))) && havoc(MI_b1_sent_plus_minusrecv_eq_1__0) }
p0 -> p0p1True { MI_b1_sent_plus_minusrecv_eq_1__0' =  (1 - MI_b1_sent_plus_minusrecv_eq_1__0) + (1 - 
	MI_b0_sent_eq_recv__0) + MI_b2_sent_plus_minusrecv_eq_2__0 && 
	havoc(MI_b1_sent_plus_minusrecv_eq_1__1)} 

p0p1True -> p1 { (MI_b2_sent_plus_minusrecv_eq_2__0 = 1 || MI_b1_sent_plus_minusrecv_eq_1__0 >= 3) &&
	MI_b1_sent_plus_minusrecv_eq_1__0' = 1 && havoc(MI_b1_sent_plus_minusrecv_eq_1__0) }
p0p1True -> p1 { (MI_b2_sent_plus_minusrecv_eq_2__0 = 0 && MI_b1_sent_plus_minusrecv_eq_1__0 < 3) && 
	MI_b1_sent_plus_minusrecv_eq_1__0' = 0 && havoc(MI_b1_sent_plus_minusrecv_eq_1__0) }


// <PC23_2> -> 'b2_sent_plus_minusrecv_eq_2 := (!((b1_sent_plus_minusrecv_eq_1 | b2_sent_plus_minusrecv_eq_2) | b0_sent_eq_recv))' <PC24>
//BOOL VERSION p1 -> p2 { MI_b2_sent_plus_minusrecv_eq_2__0' = (!((b1_sent_plus_minusrecv_eq_1 | b2_sent_plus_minusrecv_eq_2) | b0_sent_eq_recv)) && havoc(MI_b2_sent_plus_minusrecv_eq_2__0) }
p1 -> p1p2True { MI_b2_sent_plus_minusrecv_eq_2__0' = (1 - MI_b1_sent_plus_minusrecv_eq_1__0) + (1 - 			
	MI_b2_sent_plus_minusrecv_eq_2__0) + (1 - MI_b0_sent_eq_recv__0)  &&
        havoc(MI_b2_sent_plus_minusrecv_eq_2__0) } 

p1p2True -> p2 { MI_b2_sent_plus_minusrecv_eq_2__0 >= 3 && MI_b2_sent_plus_minusrecv_eq_2__0' = 1 && 
	havoc(MI_b2_sent_plus_minusrecv_eq_2__0) }
p1p2True -> p2 { MI_b2_sent_plus_minusrecv_eq_2__0 < 3 && MI_b2_sent_plus_minusrecv_eq_2__0' = 0 && 
	havoc(MI_b2_sent_plus_minusrecv_eq_2__0) }

// <PC24> -> 'e'
p2 -> sf {  done' = 1 &&
       	MI_b0_sent_eq_recv__0 = MF_b0_sent_eq_recv__0 && MI_b1_sent_plus_minusrecv_eq_1__0 = MF_b1_sent_plus_minusrecv_eq_1__0 && MI_b2_sent_plus_minusrecv_eq_2__0 = MF_b2_sent_plus_minusrecv_eq_2__0 && 
       	havoc(done) }

// <cpost_rpccall_without_err> -> 'b0_sent_eq_recv := (b1_sent_plus_minusrecv_eq_1 | (!((b2_sent_plus_minusrecv_eq_2 | b0_sent_eq_recv) | (!b1_sent_plus_minusrecv_eq_1))))' <PC23_1>
//BOOL VERSION p3 -> p0 { MI_b0_sent_eq_recv__0' = (b1_sent_plus_minusrecv_eq_1 | (!((b2_sent_plus_minusrecv_eq_2 | b0_sent_eq_recv) | 1 - MI_b1_sent_plus_minusrecv_eq_1__0))) &&  havoc(MI_b0_sent_eq_recv__0) }
p3 -> p3p0True { MI_b0_sent_eq_recv__0' =  (1 - MI_b2_sent_plus_minusrecv_eq_2__0) + (1 - MI_b0_sent_eq_recv__0) + 
	MI_b1_sent_plus_minusrecv_eq_1__0 &&
	havoc(MI_b0_sent_eq_recv__0)} 

p3p0True -> p0 { (MI_b1_sent_plus_minusrecv_eq_1__0 = 1 || MI_b0_sent_eq_recv__0 >= 3) && MI_b0_sent_eq_recv__0' = 1 &&
	havoc(MI_b0_sent_eq_recv__0) }
p3p0True -> p0 { (MI_b1_sent_plus_minusrecv_eq_1__0 = 0 && MI_b0_sent_eq_recv__0 < 3) && MI_b0_sent_eq_recv__0' = 0 && 
	havoc(MI_b0_sent_eq_recv__0) }

}

//----------------------------------
// Grammar of cpost_rpccall_without_err
// <PC23_1> -> 'b1_sent_plus_minusrecv_eq_1 := (b2_sent_plus_minusrecv_eq_2 | (!((b1_sent_plus_minusrecv_eq_1 | b0_sent_eq_recv) | (!b2_sent_plus_minusrecv_eq_2))))' <PC23_2>
// <PC23_2> -> 'b2_sent_plus_minusrecv_eq_2 := (!((b1_sent_plus_minusrecv_eq_1 | b2_sent_plus_minusrecv_eq_2) | b0_sent_eq_recv))' <PC24>
// <PC24> -> 'e'
// <cpost_rpccall_without_err> -> 'b0_sent_eq_recv := (b1_sent_plus_minusrecv_eq_1 | (!((b2_sent_plus_minusrecv_eq_2 | b0_sent_eq_recv) | (!b1_sent_plus_minusrecv_eq_1))))' <PC23_1>
//----------------------------------
traverse_cpost_rpccall_without_err_1 {
res: int;
out done: int;
initial p3;
final sf;



// <PC23_1> -> 'b1_sent_plus_minusrecv_eq_1 := (b2_sent_plus_minusrecv_eq_2 | (!((b1_sent_plus_minusrecv_eq_1 | b0_sent_eq_recv) | (!b2_sent_plus_minusrecv_eq_2))))' <PC23_2>
//BOOL VERSION p0 -> p1 { MI_b1_sent_plus_minusrecv_eq_1__1' = (b2_sent_plus_minusrecv_eq_2 | (!((b1_sent_plus_minusrecv_eq_1 |b0_sent_eq_recv) | 1 - MI_b2_sent_plus_minusrecv_eq_2__1))) &&  havoc(MI_b1_sent_plus_minusrecv_eq_1__1) }
p0 -> p0p1True { MI_b1_sent_plus_minusrecv_eq_1__1' =  (1 - MI_b1_sent_plus_minusrecv_eq_1__1) + (1 - 
	MI_b0_sent_eq_recv__1) + MI_b2_sent_plus_minusrecv_eq_2__1 && 
	havoc(MI_b1_sent_plus_minusrecv_eq_1__1)} 

p0p1True -> p1 { (MI_b2_sent_plus_minusrecv_eq_2__1 = 1 || MI_b1_sent_plus_minusrecv_eq_1__1 >= 3) && 
	MI_b1_sent_plus_minusrecv_eq_1__1' = 1 && havoc(MI_b1_sent_plus_minusrecv_eq_1__1) }
p0p1True -> p1 { (MI_b2_sent_plus_minusrecv_eq_2__1 = 0 && MI_b1_sent_plus_minusrecv_eq_1__1 < 3) && 
	MI_b1_sent_plus_minusrecv_eq_1__1' = 0 && havoc(MI_b1_sent_plus_minusrecv_eq_1__1) }

// <PC23_2> -> 'b2_sent_plus_minusrecv_eq_2 := (!((b1_sent_plus_minusrecv_eq_1 | b2_sent_plus_minusrecv_eq_2) | b0_sent_eq_recv))' <PC24>
//BOOL VERSION p1 -> p2 { MI_b2_sent_plus_minusrecv_eq_2__1' = (!((b1_sent_plus_minusrecv_eq_1 | b2_sent_plus_minusrecv_eq_2) | b0_sent_eq_recv)) &&  havoc(MI_b2_sent_plus_minusrecv_eq_2__1) }
p1 -> p1p2True { MI_b2_sent_plus_minusrecv_eq_2__1' = (1 - MI_b1_sent_plus_minusrecv_eq_1__1) + (1 - 
	MI_b2_sent_plus_minusrecv_eq_2__1) + (1 - MI_b0_sent_eq_recv__1) &&
        havoc(MI_b2_sent_plus_minusrecv_eq_2__1) } 

p1p2True -> p2 { MI_b2_sent_plus_minusrecv_eq_2__1 >= 3 && MI_b2_sent_plus_minusrecv_eq_2__1' = 1 && 
	havoc(MI_b2_sent_plus_minusrecv_eq_2__1) }
p1p2True -> p2 { MI_b2_sent_plus_minusrecv_eq_2__1 < 3 && MI_b2_sent_plus_minusrecv_eq_2__1' = 0 && 
	havoc(MI_b2_sent_plus_minusrecv_eq_2__1) }

// <PC24> -> 'e'
p2 -> sf {  done' = 1 &&
       	MI_b0_sent_eq_recv__1 = MF_b0_sent_eq_recv__1 && MI_b1_sent_plus_minusrecv_eq_1__1 = MF_b1_sent_plus_minusrecv_eq_1__1 && MI_b2_sent_plus_minusrecv_eq_2__1 = MF_b2_sent_plus_minusrecv_eq_2__1 && 
       	havoc(done) }

// <cpost_rpccall_without_err> -> 'b0_sent_eq_recv := (b1_sent_plus_minusrecv_eq_1 | (!((b2_sent_plus_minusrecv_eq_2 | b0_sent_eq_recv) | (!b1_sent_plus_minusrecv_eq_1))))' <PC23_1>
//BOOL VERSION p3 -> p0 { MI_b0_sent_eq_recv__1' = (b1_sent_plus_minusrecv_eq_1 | (!((b2_sent_plus_minusrecv_eq_2 | b0_sent_eq_recv) | 1 - MI_b1_sent_plus_minusrecv_eq_1__1))) &&  havoc(MI_b0_sent_eq_recv__1) }
p3 -> p3p0True { MI_b0_sent_eq_recv__1' =  (1 - MI_b2_sent_plus_minusrecv_eq_2__1) + (1 - MI_b0_sent_eq_recv__1) + 
	MI_b1_sent_plus_minusrecv_eq_1__1 &&
	havoc(MI_b0_sent_eq_recv__1)} 

p3p0True -> si { (MI_b1_sent_plus_minusrecv_eq_1__1 = 1 || MI_b0_sent_eq_recv__1 >= 3) && MI_b0_sent_eq_recv__1' = 1 && 
	havoc(MI_b0_sent_eq_recv__1) }
p3p0True -> si { (MI_b1_sent_plus_minusrecv_eq_1__1 = 0 && MI_b0_sent_eq_recv__1 < 3) && MI_b0_sent_eq_recv__1' = 0 && 
	havoc(MI_b0_sent_eq_recv__1) }

}


